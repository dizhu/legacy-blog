<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>代码混音师</title>
  
  
  <link href="/atom.xml" rel="self"/>
  
  <link href="https://coderemixer.com/"/>
  <updated>2020-04-05T02:34:10.156Z</updated>
  <id>https://coderemixer.com/</id>
  
  <author>
    <name>CodeRemixer</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>一些关于音乐游戏的想法</title>
    <link href="https://coderemixer.com/2020/04/05/ideas-about-music-game/"/>
    <id>https://coderemixer.com/2020/04/05/ideas-about-music-game/</id>
    <published>2020-04-05T02:14:42.000Z</published>
    <updated>2020-04-05T02:34:10.156Z</updated>
    
    <content type="html"><![CDATA[<p>Stanley Parable 中通过对 Stanley 工作的描写，讽刺了一些电子游戏的本质。「屏幕上让 Stanley 按一个键，Stanley 就按下那个键」许多电子游戏事实上就是如此，本质上就是一些充满了 QTE 的播片。如果延伸到音乐游戏上，事实上就延展出了对于音乐游戏「音乐性 (musicality)」的探讨。</p><p>如果让我找个音乐游戏中最没有音乐性的，应该就是劲舞团（Audition, X-BEAT）。这东西背后放什么音乐和你敲下去什么东西基本没有任何关系，除了你需要在合拍 (multiple-levels) 上敲空格以外。如果我们追溯音乐游戏的早期，其实音乐游戏制作人对于音乐游戏本身的思考其实是很多样的，像是 1996 年发售的 パラッパラッパー 基本上是一个对节奏的 call and response，从最基本的正拍节奏开始，慢慢引入各种复杂的节奏型。同样类型的其实还有 1999 年的 Space Channel 5，这款游戏甚至没有视觉上即将到来音符的任何提示，完全需要依靠听力和对节奏的记忆来完成游戏。不过这些依赖说唱发展的节奏游戏必然逃不开对唱和模仿的形式。设计得更加精妙的类型是节奏天国（リズム天国），通过把各种节奏型转换成一系列小游戏，视觉反馈是滞后的，用户需要在一些简单练习后通过掌握音乐本身的节奏来自行完成对游戏内按键的判断。</p><p>现在比较流行的音乐游戏，主要还是受启发于 1997 年发售的 beatmania 比较大。这类游戏本质上模拟乐器发出声音的节奏，有提前的视觉提示，几乎不会在没有声音的地方按键，相对来说对于节奏感的要求是很低的，上手的难度低。但这类游戏好模仿的一个原因是，简单调整演出和按键方式就可以相对容易做出新游戏，也很容易将现有的歌曲做成游戏内的关卡便于长期运营。增加难度的方法也比较容易，只需要增加音符出现的密度。像是 Space Channel 5 Part 2 最后大决战的演出里搞过一些密集的 16 分音符以外，通常都没有快到按不出来的按键，但是这样的现象在现在的音乐游戏中极其常见。同时，这样游戏也还可以通过提高判定严格程度来提高难度。在节奏天国这样的游戏里，把判定难度放到 10 个 frame 左右大多数人就会很难算准节奏了，而在视觉和听觉实际演奏音符的双重刺激下，经过练习，现代音游里动不动就可以把判定放到 6 个 frame 甚至更低。这也让玩家在通关后的成就感大幅提升。但这样的难度提升其实不是「音乐性」上难度的提升，其实就是单纯「恶心」人而已。当然这里「恶心」不是什么贬义词，我也很吃恶心这套。</p><p>但这类游戏有个问题是，这样的游戏对于音乐的理解是很有问题的。因为音乐中不是这里大声就一定是重拍，这种对于节奏的理解实在太过肤浅，基本就是把人当成背谱机器。这就像我们不能通过科幻小说来学习科学知识。你不能看完大刘的《球形闪电》就真的认为「盯着东西看，波函数会塌缩」。但是音乐本身不是一个艰涩的科学知识，它本来就是充满了人天生的对节奏的内在感受，是一个每个人都能享受的东西。所以我们才已经有一些游戏做到了真正把音乐游戏做成围绕「音乐」本身设计的游戏，而不是一个换了皮的 QTE 游戏。</p><p>但我也很难说这种克服恶心下得到的成就感比较高，还是在游戏后自己感觉到自己对于音乐的理解有提升的这种好奇心带来的成就高。对于我来说，还是后者比较开心，而且后者也更可以做成一个共乐的游戏，而不是在一个音游的小圈子里大家天天在那里埋头背谱练习。只不过我们已经有很多年再也没有类似设计目的的游戏了。虽然这类游戏销量其实也都不低，有好几款都是大卖的爆款。但和那些能提供长期营收的流水音游来说，还是差了点。不知道有没有什么方法可以同时兼顾游戏性和商业性。</p><p>不知道各位游戏制作人有没有什么想法，也算是能了我一个心愿了。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;Stanley Parable 中通过对 Stanley 工作的描写，讽刺了一些电子游戏的本质。「屏幕上让 Stanley 按一个键，Stanley 就按下那个键」许多电子游戏事实上就是如此，本质上就是一些充满了 QTE 的播片。如果延伸到音乐游戏上，事实上就延展出了对于音
      
    
    </summary>
    
    
      <category term="游戏" scheme="https://coderemixer.com/tags/%E6%B8%B8%E6%88%8F/"/>
    
      <category term="音乐" scheme="https://coderemixer.com/tags/%E9%9F%B3%E4%B9%90/"/>
    
      <category term="随笔" scheme="https://coderemixer.com/tags/%E9%9A%8F%E7%AC%94/"/>
    
  </entry>
  
  <entry>
    <title>6 小时重构一个字幕工具</title>
    <link href="https://coderemixer.com/2020/03/15/fast-srt-subtitle/"/>
    <id>https://coderemixer.com/2020/03/15/fast-srt-subtitle/</id>
    <published>2020-03-15T01:20:37.000Z</published>
    <updated>2020-03-15T02:57:33.589Z</updated>
    
    <content type="html"><![CDATA[<h2 id="背景"><a href="#背景" class="headerlink" title="背景"></a>背景</h2><p>某位来自伊朗，现居住在加拿大温哥华的翻译人员曾说过：「ass 能解决所有问题，对于我来说。」</p><p><img src="/static/lodz.jpg" alt="lodz"></p><p><a href="http://www.aegisub.org/" target="_blank" rel="noopener">Aegisub</a> 确实是一个非常好用的工具，提供了非常丰富的字幕特效，以及相对高的字幕效率，除了程序很容易崩溃。但对于简单的纯文本字幕，其实流程是可以进一步被优化的。</p><h2 id="字幕流程"><a href="#字幕流程" class="headerlink" title="字幕流程"></a>字幕流程</h2><p>字幕流程其实就三个部分：文字稿整理（听写或翻译）、打轴、校对。我们可以围绕这三个流程来设计一套最简单最高效的工作流。昨天看 <a href="https://www.youtube.com/watch?v=Ath3BX9DBRs" target="_blank" rel="noopener">NiceChord 好和弦</a>的时候发现 wiwi 老师写了个类似想法的工具，主要是围绕提高打轴效率的一套程序。我尝试用了一下这套工具，想法是很好，但这代码是写的有点糟糕，介面也基本没有。</p><p>于是我考虑重构。重构主要目的如下：</p><ul><li>用 Vue.js 实现一套可用的 UI</li><li>默认提供视频的播放控制</li><li>移除运行时的 Node.js 和 http-server 依赖</li><li>基于 File API 读取字幕文件和视频文件</li><li>基于 GitHub Actions 和 GitHub Pages 实现自动部署</li><li>基于 MIT 开源协议</li><li>提供 ESLint 代码风格 Linting</li><li>新增动态响应实现控制</li><li>新增 i18n 支持</li><li>新增字幕的实时预览功能</li><li>新增 SRT 字幕编辑有效性校验</li><li>新增对 WebVTT 格式的支持</li></ul><p>重新实现所有已有功能大约花了 2 小时，加的那堆新功能花了 4 小时。共计 6 小时把事情给搞完了。</p><p><a href="https://srt.coderemixer.com/" target="_blank" rel="noopener">Live Demo</a></p><p><a href="https://github.com/dsh0416/fast-srt-subtitle/" target="_blank" rel="noopener">GitHub Repo</a></p><p><a href="https://github.com/wiwikuan/fast-srt-subtitle/pull/4" target="_blank" rel="noopener">GitHub Pull Request</a></p><h2 id="已知-bug"><a href="#已知-bug" class="headerlink" title="已知 bug"></a>已知 bug</h2><p><del>发现 Firefox 的 CC 字幕 track 不能加载 blob url。这使得实时预览功能在 Firefox 上存在一定的问题，但 Chrome 和 Safari 都没有问题。准备这两天准备一下各种细节情况，向 Mozilla 回报一下。</del> 发现加载后和 Chrome readystate 不一样，强制 show 了一下竟然就好了。</p><p>其实也可以用 Electron 封装一下离线使用。</p><p>美其名曰，统一体验。</p><p>实则内存爆灹。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;背景&quot;&gt;&lt;a href=&quot;#背景&quot; class=&quot;headerlink&quot; title=&quot;背景&quot;&gt;&lt;/a&gt;背景&lt;/h2&gt;&lt;p&gt;某位来自伊朗，现居住在加拿大温哥华的翻译人员曾说过：「ass 能解决所有问题，对于我来说。」&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;/stati
      
    
    </summary>
    
    
      <category term="字幕" scheme="https://coderemixer.com/tags/%E5%AD%97%E5%B9%95/"/>
    
      <category term="YouTube" scheme="https://coderemixer.com/tags/YouTube/"/>
    
  </entry>
  
  <entry>
    <title>一天折腾两个散热系统</title>
    <link href="https://coderemixer.com/2020/03/15/one-day-two-fans/"/>
    <id>https://coderemixer.com/2020/03/15/one-day-two-fans/</id>
    <published>2020-03-14T16:55:18.000Z</published>
    <updated>2020-03-15T04:09:44.994Z</updated>
    
    <content type="html"><![CDATA[<h2 id="背景"><a href="#背景" class="headerlink" title="背景"></a>背景</h2><p>我家有两个东西的散热我非常不满意。</p><p>一个是我去年买的 Ryzen 2700x。之前看评测都说自带的风扇就挺好用，但是我实际用下来吵不吵已经不是最大的问题了，随便超频到全核 4.0GHz 就打温度墙重启了。最魔幻的是这风扇上还有个 H/L 拨片。查了一下，调到 H 会提高转速上限。这转速就差把风扇塞进服务器机箱来整个暴力扇起飞了。</p><p>还有一个是我用了 5 年的 PS4，最近玩点新作风扇就狂转。我原来以为是新游戏比较吃性能。但我最近回去玩了《风之旅人》，结果也狂转。我知道这事麻烦了。头几个批次的 PS4 有散热问题会导致芯片损坏无限蓝灯。虽然我这机器三年质保，但我玩的频率低，所以一直没用坏。如果现在坏了，基本就是重新买了。</p><h2 id="材料"><a href="#材料" class="headerlink" title="材料"></a>材料</h2><p>坊间传闻过段时间各种电脑配件都要涨价，那么就早买早享受吧。散热器我买了 Antec K240 一体化水冷。这个是我 ITX 机箱能放下的最大尺寸了。而 PS4 我估计是硅脂干了，风扇堵了。买了一罐压缩空气和 MX-4 硅脂。MX-4 的纸面数据很好看，热传导率 8.5W/mK，但一直有传闻说干起来很快。不过我觉得应该能撑到我买 PS5 吧。</p><h2 id="搞机箱"><a href="#搞机箱" class="headerlink" title="搞机箱"></a>搞机箱</h2><p>换这个散热器还是非常一波三折的。首先先要把旧的散热器拆下来，结果我这一拔直接把 CPU 粘在散热器上一起拔下来了，把我吓了一大跳，我还以为针脚断在卡座里了。结果上网一搜，都说这是个常见问题，要扭一扭<del>，舔一舔</del>才能取下来。</p><p>第二个遇到的问题是机箱空间。ITX 机箱太小了，除了要把散热器接上，还需要有 RGB 的排线。我原来还非常小心地给 ITX 搞出了背线理线，这次是把几个机箱风扇拆来拆去挪来挪去，忙活了两个小时终于给装上了。</p><p>点亮无法开机，查了一下故障灯是 DRAM 错误。重新插拔后正常开机，但是风扇异响。一个个风扇拔电测试，最后发现某一个机箱风扇轴承里发出了奇怪的噪音。应该机箱风扇是免维护的，轴承是坏了。不过我先试着把轴承密封橡胶圈拆了喷了点 WD-40 进去，结果完美润滑，声音没了，先这样凑活用吧。</p><p><img src="/static/wd40-meme.jpg" alt="WD-40 Meme"></p><h2 id="搞-PS4"><a href="#搞-PS4" class="headerlink" title="搞 PS4"></a>搞 PS4</h2><p>搞完机箱睡不着，就一并把 PS4 也弄了吧。上 YouTube 找了几个 PS4 Teardown 的视频，结果实际拆的时候发现 PS4 早年型号比后面型号还多两个螺丝。还好没有硬拆，卡扣拔不动的时候比较谨慎，多摸了摸，摸到了两个别的拆解视频里没有的螺丝。PS4 主要内部都是 T8 螺丝和十字螺丝。T8 虽然说是个安全螺丝，但对我这种拆惯了各种怪螺丝的人来说已经算是非常常见的螺丝了。</p><p><img src="/static/ps4-cpu.jpg" alt="PS4 CPU"></p><p>拆完发现，CPU/GPU 上的硅脂已经干到直接看得到晶体表面了。还好拆了，不然真的要闯祸。上了新硅脂，把风扇用压缩空气清理了一下。组装回去，可以说 PS4 装回去的体验非常好，在需要安装螺丝的地方都画了箭头，甚至不需要强记那些螺丝的安装顺序。本来还害怕那个静电开关可能会出问题，结果一次正常点亮。玩了 10 分钟《死亡搁浅》，结果风扇几乎没有什么声音？！</p><p>所以 PS4 把保修贴纸贴得那么牢，声称散热是免维护的意思是… 三年去买台新机器的意思？</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;背景&quot;&gt;&lt;a href=&quot;#背景&quot; class=&quot;headerlink&quot; title=&quot;背景&quot;&gt;&lt;/a&gt;背景&lt;/h2&gt;&lt;p&gt;我家有两个东西的散热我非常不满意。&lt;/p&gt;
&lt;p&gt;一个是我去年买的 Ryzen 2700x。之前看评测都说自带的风扇就挺好用，但是我实际用下
      
    
    </summary>
    
    
      <category term="游戏" scheme="https://coderemixer.com/tags/%E6%B8%B8%E6%88%8F/"/>
    
      <category term="散热" scheme="https://coderemixer.com/tags/%E6%95%A3%E7%83%AD/"/>
    
      <category term="PS4" scheme="https://coderemixer.com/tags/PS4/"/>
    
  </entry>
  
  <entry>
    <title>「Keyboard Moe」从零开始自制键盘（三）：分区</title>
    <link href="https://coderemixer.com/2020/03/11/moe-keyboard-log-3/"/>
    <id>https://coderemixer.com/2020/03/11/moe-keyboard-log-3/</id>
    <published>2020-03-10T16:48:08.000Z</published>
    <updated>2020-03-10T16:45:53.219Z</updated>
    
    <content type="html"><![CDATA[<p>ESP32 的片上 Flash 应该有 4MB，但是我之前刷入 ROM 的时候，提示可用的空间只有 1280KB，这让我非常困扰。引入一个 BLE 库就已经吃掉了 75% 的 Flash 空间，我一度怀疑我是不是能在有限的空间里完成程序。ESP32 的一个很有意思的特性就是非常容易实现基于 WiFi 的 OTA 固件升级系统。于是我今天研究了一下，结果一研究明白了之前问题的原因，简单来说就是分区表。</p><p>PlatformIO 默认的分区表如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"># Name,   Type, SubType, Offset,  Size, Flags</span><br><span class="line">nvs,      data, nvs,     0x9000,  0x5000,</span><br><span class="line">otadata,  data, ota,     0xe000,  0x2000,</span><br><span class="line">app0,     app,  ota_0,   0x10000, 0x140000,</span><br><span class="line">app1,     app,  ota_1,   0x150000,0x140000,</span><br><span class="line">spiffs,   data, spiffs,  0x290000,0x170000,</span><br></pre></td></tr></table></figure><p>也就是说，因为要支持 OTA，所以固件被分成了两块，每块 <code>0x140000 bytes</code>，然后他们有一个共享的 spiffs 分区（SPI Flash Filing System），这可以之后被我们用来存储配置文件。既然我觉得不够用，那我还是先来调整一下分区吧，我改过后的分区如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"># Name,   Type, SubType, Offset,  Size, Flags</span><br><span class="line">nvs,      data, nvs,     0x9000,  0x5000,</span><br><span class="line">otadata,  data, ota,     0xe000,  0x2000,</span><br><span class="line">app0,     app,  ota_0,   0x10000, 0x180000,</span><br><span class="line">app1,     app,  ota_1,   0x190000,0x180000,</span><br><span class="line">spiffs,   data, spiffs,  0x310000,0x90000,</span><br></pre></td></tr></table></figure><p>应该我的配置文件不会超过 576KB，所以给固件的两个分区每个都多分类了 256KB。固件的可用容量扩大到了 1536KB，缓解了燃眉之急。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;ESP32 的片上 Flash 应该有 4MB，但是我之前刷入 ROM 的时候，提示可用的空间只有 1280KB，这让我非常困扰。引入一个 BLE 库就已经吃掉了 75% 的 Flash 空间，我一度怀疑我是不是能在有限的空间里完成程序。ESP32 的一个很有意思的特性就是
      
    
    </summary>
    
    
      <category term="键盘" scheme="https://coderemixer.com/tags/%E9%94%AE%E7%9B%98/"/>
    
  </entry>
  
  <entry>
    <title>「Keyboard Moe」从零开始自制键盘（二）：蓝牙连接与原型键盘矩阵</title>
    <link href="https://coderemixer.com/2020/02/21/moe-keyboard-log-2/"/>
    <id>https://coderemixer.com/2020/02/21/moe-keyboard-log-2/</id>
    <published>2020-02-21T01:03:37.000Z</published>
    <updated>2020-02-21T02:03:14.219Z</updated>
    
    <content type="html"><![CDATA[<h2 id="前情回顾"><a href="#前情回顾" class="headerlink" title="前情回顾"></a>前情回顾</h2><ul><li><a href="https://coderemixer.com/2020/02/16/moe-keyboard-log-1/">「Keyboard Moe」从零开始自制键盘（一）：硬件设计</a></li></ul><h2 id="开发板"><a href="#开发板" class="headerlink" title="开发板"></a>开发板</h2><p>由于之前设计的主控是 ESP-WROOM-32，而且自动刷机口用的 CP210x 芯片。理所当然，开发板就会买 <a href="http://akizukidenshi.com/catalog/g/gM-11819/" target="_blank" rel="noopener">ESP32-DevKitC ESP-WROOM-32</a>。最近日本疫情也是越来越重了，我就从秋月电子通商网站上买了一片。说实话这网站的硬件也不是特别全，如果最后配 BOM 可能还是要亲自去跑秋叶原。ESP32 自己的官方库不是特别好用，好在已经有兼容的 <a href="https://www.arduino.cc/" target="_blank" rel="noopener">Arduino</a> 库。<a href="https://platformio.org/" target="_blank" rel="noopener">PlatformIO</a> 对 ESP32 开发板也做了支持，所以一键就能建出基本的工程结构。</p><h2 id="蓝牙连接"><a href="#蓝牙连接" class="headerlink" title="蓝牙连接"></a>蓝牙连接</h2><p>我对蓝牙一窍不通，就上网参考一下。我上网看了看找到一个 <a href="https://gist.github.com/sabas1080/93115fb66e09c9b40e5857a19f3e7787" target="_blank" rel="noopener">Gist 样例</a>。跑了一下很容易跑通了。比较奇怪的是，一引入蓝牙的协议栈，Flash 就吃掉 73% 了，其它部分程序可能要省着用了。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">Advanced Memory Usage is available via &quot;PlatformIO Home &gt; Project Inspect&quot;</span><br><span class="line">RAM:   [=         ]  11.0% (used 35960 bytes from 327680 bytes)</span><br><span class="line">Flash: [=======   ]  73.6% (used 964611 bytes from 1310720 bytes)</span><br></pre></td></tr></table></figure><p>但我不能直接抄这代码，首先这东西是 GNU LGPL 协议的，实在是太污染了。另一个问题是，这个 C++ 代码写得非常不 C++，而且在协议栈上只实现了键盘相关的协议，而我需要同时用 HID 中键盘和鼠标两者的协议。所以我又参考了 ESP32 的另一个<a href="https://github.com/asterics/esp32_mouse_keyboard" target="_blank" rel="noopener">实现</a>，最后还是选择自己重写。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// status.h</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">ifndef</span> STATUS_H_</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> STATUS_H_</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">bool</span> bluetoothConnected = <span class="literal">false</span>;</span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">endif</span> <span class="comment">// STATUS_H_</span></span></span><br></pre></td></tr></table></figure><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// BluetoothService.h</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">ifndef</span> BLUETOOTH_SERVICE_H_</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> BLUETOOTH_SERVICE_H_</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;Arduino.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;BLEDevice.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;BLEHIDDevice.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;BLE2902.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;status.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">static</span> <span class="keyword">const</span> <span class="keyword">uint8_t</span> HID_REPORT_MAP[] = &#123;</span><br><span class="line">  <span class="number">0x05</span>, <span class="number">0x01</span>,  <span class="comment">// Usage Page (Generic Desktop)</span></span><br><span class="line">  <span class="number">0x09</span>, <span class="number">0x02</span>,  <span class="comment">// Usage (Mouse)</span></span><br><span class="line">  <span class="number">0xA1</span>, <span class="number">0x01</span>,  <span class="comment">// Collection (Application)</span></span><br><span class="line">  <span class="number">0x85</span>, <span class="number">0x01</span>,  <span class="comment">// Report Id (1)</span></span><br><span class="line">  <span class="number">0x09</span>, <span class="number">0x01</span>,  <span class="comment">//   Usage (Pointer)</span></span><br><span class="line">  <span class="number">0xA1</span>, <span class="number">0x00</span>,  <span class="comment">//   Collection (Physical)</span></span><br><span class="line">  <span class="number">0x05</span>, <span class="number">0x09</span>,  <span class="comment">//     Usage Page (Buttons)</span></span><br><span class="line">  <span class="number">0x19</span>, <span class="number">0x01</span>,  <span class="comment">//     Usage Minimum (01) - Button 1</span></span><br><span class="line">  <span class="number">0x29</span>, <span class="number">0x03</span>,  <span class="comment">//     Usage Maximum (03) - Button 3</span></span><br><span class="line">  <span class="number">0x15</span>, <span class="number">0x00</span>,  <span class="comment">//     Logical Minimum (0)</span></span><br><span class="line">  <span class="number">0x25</span>, <span class="number">0x01</span>,  <span class="comment">//     Logical Maximum (1)</span></span><br><span class="line">  <span class="number">0x75</span>, <span class="number">0x01</span>,  <span class="comment">//     Report Size (1)</span></span><br><span class="line">  <span class="number">0x95</span>, <span class="number">0x03</span>,  <span class="comment">//     Report Count (3)</span></span><br><span class="line">  <span class="number">0x81</span>, <span class="number">0x02</span>,  <span class="comment">//     Input (Data, Variable, Absolute) - Button states</span></span><br><span class="line">  <span class="number">0x75</span>, <span class="number">0x05</span>,  <span class="comment">//     Report Size (5)</span></span><br><span class="line">  <span class="number">0x95</span>, <span class="number">0x01</span>,  <span class="comment">//     Report Count (1)</span></span><br><span class="line">  <span class="number">0x81</span>, <span class="number">0x01</span>,  <span class="comment">//     Input (Constant) - Padding or Reserved bits</span></span><br><span class="line">  <span class="number">0x05</span>, <span class="number">0x01</span>,  <span class="comment">//     Usage Page (Generic Desktop)</span></span><br><span class="line">  <span class="number">0x09</span>, <span class="number">0x30</span>,  <span class="comment">//     Usage (X)</span></span><br><span class="line">  <span class="number">0x09</span>, <span class="number">0x31</span>,  <span class="comment">//     Usage (Y)</span></span><br><span class="line">  <span class="number">0x09</span>, <span class="number">0x38</span>,  <span class="comment">//     Usage (Wheel)</span></span><br><span class="line">  <span class="number">0x15</span>, <span class="number">0x81</span>,  <span class="comment">//     Logical Minimum (-127)</span></span><br><span class="line">  <span class="number">0x25</span>, <span class="number">0x7F</span>,  <span class="comment">//     Logical Maximum (127)</span></span><br><span class="line">  <span class="number">0x75</span>, <span class="number">0x08</span>,  <span class="comment">//     Report Size (8)</span></span><br><span class="line">  <span class="number">0x95</span>, <span class="number">0x03</span>,  <span class="comment">//     Report Count (3)</span></span><br><span class="line">  <span class="number">0x81</span>, <span class="number">0x06</span>,  <span class="comment">//     Input (Data, Variable, Relative) - X &amp; Y coordinate</span></span><br><span class="line">  <span class="number">0xC0</span>,        <span class="comment">//   End Collection</span></span><br><span class="line">  <span class="number">0xC0</span>,        <span class="comment">// End Collection</span></span><br><span class="line"></span><br><span class="line">  <span class="number">0x05</span>, <span class="number">0x01</span>,  <span class="comment">// Usage Pg (Generic Desktop)</span></span><br><span class="line">  <span class="number">0x09</span>, <span class="number">0x06</span>,  <span class="comment">// Usage (Keyboard)</span></span><br><span class="line">  <span class="number">0xA1</span>, <span class="number">0x01</span>,  <span class="comment">// Collection: (Application)</span></span><br><span class="line">  <span class="number">0x85</span>, <span class="number">0x02</span>,  <span class="comment">// Report Id (2)</span></span><br><span class="line">  <span class="comment">//</span></span><br><span class="line">  <span class="number">0x05</span>, <span class="number">0x07</span>,  <span class="comment">//   Usage Pg (Key Codes)</span></span><br><span class="line">  <span class="number">0x19</span>, <span class="number">0xE0</span>,  <span class="comment">//   Usage Min (224)</span></span><br><span class="line">  <span class="number">0x29</span>, <span class="number">0xE7</span>,  <span class="comment">//   Usage Max (231)</span></span><br><span class="line">  <span class="number">0x15</span>, <span class="number">0x00</span>,  <span class="comment">//   Log Min (0)</span></span><br><span class="line">  <span class="number">0x25</span>, <span class="number">0x01</span>,  <span class="comment">//   Log Max (1)</span></span><br><span class="line">  <span class="comment">//</span></span><br><span class="line">  <span class="comment">//   Modifier byte</span></span><br><span class="line">  <span class="number">0x75</span>, <span class="number">0x01</span>,  <span class="comment">//   Report Size (1)</span></span><br><span class="line">  <span class="number">0x95</span>, <span class="number">0x08</span>,  <span class="comment">//   Report Count (8)</span></span><br><span class="line">  <span class="number">0x81</span>, <span class="number">0x02</span>,  <span class="comment">//   Input: (Data, Variable, Absolute)</span></span><br><span class="line">  <span class="comment">//</span></span><br><span class="line">  <span class="comment">//   Reserved byte</span></span><br><span class="line">  <span class="number">0x95</span>, <span class="number">0x01</span>,  <span class="comment">//   Report Count (1)</span></span><br><span class="line">  <span class="number">0x75</span>, <span class="number">0x08</span>,  <span class="comment">//   Report Size (8)</span></span><br><span class="line">  <span class="number">0x81</span>, <span class="number">0x01</span>,  <span class="comment">//   Input: (Constant)</span></span><br><span class="line">  <span class="comment">//</span></span><br><span class="line">  <span class="comment">//   LED report</span></span><br><span class="line">  <span class="number">0x95</span>, <span class="number">0x05</span>,  <span class="comment">//   Report Count (5)</span></span><br><span class="line">  <span class="number">0x75</span>, <span class="number">0x01</span>,  <span class="comment">//   Report Size (1)</span></span><br><span class="line">  <span class="number">0x05</span>, <span class="number">0x08</span>,  <span class="comment">//   Usage Pg (LEDs)</span></span><br><span class="line">  <span class="number">0x19</span>, <span class="number">0x01</span>,  <span class="comment">//   Usage Min (1)</span></span><br><span class="line">  <span class="number">0x29</span>, <span class="number">0x05</span>,  <span class="comment">//   Usage Max (5)</span></span><br><span class="line">  <span class="number">0x91</span>, <span class="number">0x02</span>,  <span class="comment">//   Output: (Data, Variable, Absolute)</span></span><br><span class="line">  <span class="comment">//</span></span><br><span class="line">  <span class="comment">//   LED report padding</span></span><br><span class="line">  <span class="number">0x95</span>, <span class="number">0x01</span>,  <span class="comment">//   Report Count (1)</span></span><br><span class="line">  <span class="number">0x75</span>, <span class="number">0x03</span>,  <span class="comment">//   Report Size (3)</span></span><br><span class="line">  <span class="number">0x91</span>, <span class="number">0x01</span>,  <span class="comment">//   Output: (Constant)</span></span><br><span class="line">  <span class="comment">//</span></span><br><span class="line">  <span class="comment">//   Key arrays (6 bytes)</span></span><br><span class="line">  <span class="number">0x95</span>, <span class="number">0x06</span>,  <span class="comment">//   Report Count (6)</span></span><br><span class="line">  <span class="number">0x75</span>, <span class="number">0x08</span>,  <span class="comment">//   Report Size (8)</span></span><br><span class="line">  <span class="number">0x15</span>, <span class="number">0x00</span>,  <span class="comment">//   Log Min (0)</span></span><br><span class="line">  <span class="number">0x25</span>, <span class="number">0x65</span>,  <span class="comment">//   Log Max (101)</span></span><br><span class="line">  <span class="number">0x05</span>, <span class="number">0x07</span>,  <span class="comment">//   Usage Pg (Key Codes)</span></span><br><span class="line">  <span class="number">0x19</span>, <span class="number">0x00</span>,  <span class="comment">//   Usage Min (0)</span></span><br><span class="line">  <span class="number">0x29</span>, <span class="number">0x65</span>,  <span class="comment">//   Usage Max (101)</span></span><br><span class="line">  <span class="number">0x81</span>, <span class="number">0x00</span>,  <span class="comment">//   Input: (Data, Array)</span></span><br><span class="line">  <span class="comment">//</span></span><br><span class="line">  <span class="number">0xC0</span>,        <span class="comment">// End Collection</span></span><br><span class="line">  <span class="comment">//</span></span><br><span class="line">  <span class="number">0x05</span>, <span class="number">0x0C</span>,   <span class="comment">// Usage Pg (Consumer Devices)</span></span><br><span class="line">  <span class="number">0x09</span>, <span class="number">0x01</span>,   <span class="comment">// Usage (Consumer Control)</span></span><br><span class="line">  <span class="number">0xA1</span>, <span class="number">0x01</span>,   <span class="comment">// Collection (Application)</span></span><br><span class="line">  <span class="number">0x85</span>, <span class="number">0x03</span>,   <span class="comment">// Report Id (3)</span></span><br><span class="line">  <span class="number">0x09</span>, <span class="number">0x02</span>,   <span class="comment">//   Usage (Numeric Key Pad)</span></span><br><span class="line">  <span class="number">0xA1</span>, <span class="number">0x02</span>,   <span class="comment">//   Collection (Logical)</span></span><br><span class="line">  <span class="number">0x05</span>, <span class="number">0x09</span>,   <span class="comment">//     Usage Pg (Button)</span></span><br><span class="line">  <span class="number">0x19</span>, <span class="number">0x01</span>,   <span class="comment">//     Usage Min (Button 1)</span></span><br><span class="line">  <span class="number">0x29</span>, <span class="number">0x0A</span>,   <span class="comment">//     Usage Max (Button 10)</span></span><br><span class="line">  <span class="number">0x15</span>, <span class="number">0x01</span>,   <span class="comment">//     Logical Min (1)</span></span><br><span class="line">  <span class="number">0x25</span>, <span class="number">0x0A</span>,   <span class="comment">//     Logical Max (10)</span></span><br><span class="line">  <span class="number">0x75</span>, <span class="number">0x04</span>,   <span class="comment">//     Report Size (4)</span></span><br><span class="line">  <span class="number">0x95</span>, <span class="number">0x01</span>,   <span class="comment">//     Report Count (1)</span></span><br><span class="line">  <span class="number">0x81</span>, <span class="number">0x00</span>,   <span class="comment">//     Input (Data, Ary, Abs)</span></span><br><span class="line">  <span class="number">0xC0</span>,         <span class="comment">//   End Collection</span></span><br><span class="line">  <span class="number">0x05</span>, <span class="number">0x0C</span>,   <span class="comment">//   Usage Pg (Consumer Devices)</span></span><br><span class="line">  <span class="number">0x09</span>, <span class="number">0x86</span>,   <span class="comment">//   Usage (Channel)</span></span><br><span class="line">  <span class="number">0x15</span>, <span class="number">0xFF</span>,   <span class="comment">//   Logical Min (-1)</span></span><br><span class="line">  <span class="number">0x25</span>, <span class="number">0x01</span>,   <span class="comment">//   Logical Max (1)</span></span><br><span class="line">  <span class="number">0x75</span>, <span class="number">0x02</span>,   <span class="comment">//   Report Size (2)</span></span><br><span class="line">  <span class="number">0x95</span>, <span class="number">0x01</span>,   <span class="comment">//   Report Count (1)</span></span><br><span class="line">  <span class="number">0x81</span>, <span class="number">0x46</span>,   <span class="comment">//   Input (Data, Var, Rel, Null)</span></span><br><span class="line">  <span class="number">0x09</span>, <span class="number">0xE9</span>,   <span class="comment">//   Usage (Volume Up)</span></span><br><span class="line">  <span class="number">0x09</span>, <span class="number">0xEA</span>,   <span class="comment">//   Usage (Volume Down)</span></span><br><span class="line">  <span class="number">0x15</span>, <span class="number">0x00</span>,   <span class="comment">//   Logical Min (0)</span></span><br><span class="line">  <span class="number">0x75</span>, <span class="number">0x01</span>,   <span class="comment">//   Report Size (1)</span></span><br><span class="line">  <span class="number">0x95</span>, <span class="number">0x02</span>,   <span class="comment">//   Report Count (2)</span></span><br><span class="line">  <span class="number">0x81</span>, <span class="number">0x02</span>,   <span class="comment">//   Input (Data, Var, Abs)</span></span><br><span class="line">  <span class="number">0x09</span>, <span class="number">0xE2</span>,   <span class="comment">//   Usage (Mute)</span></span><br><span class="line">  <span class="number">0x09</span>, <span class="number">0x30</span>,   <span class="comment">//   Usage (Power)</span></span><br><span class="line">  <span class="number">0x09</span>, <span class="number">0x83</span>,   <span class="comment">//   Usage (Recall Last)</span></span><br><span class="line">  <span class="number">0x09</span>, <span class="number">0x81</span>,   <span class="comment">//   Usage (Assign Selection)</span></span><br><span class="line">  <span class="number">0x09</span>, <span class="number">0xB0</span>,   <span class="comment">//   Usage (Play)</span></span><br><span class="line">  <span class="number">0x09</span>, <span class="number">0xB1</span>,   <span class="comment">//   Usage (Pause)</span></span><br><span class="line">  <span class="number">0x09</span>, <span class="number">0xB2</span>,   <span class="comment">//   Usage (Record)</span></span><br><span class="line">  <span class="number">0x09</span>, <span class="number">0xB3</span>,   <span class="comment">//   Usage (Fast Forward)</span></span><br><span class="line">  <span class="number">0x09</span>, <span class="number">0xB4</span>,   <span class="comment">//   Usage (Rewind)</span></span><br><span class="line">  <span class="number">0x09</span>, <span class="number">0xB5</span>,   <span class="comment">//   Usage (Scan Next)</span></span><br><span class="line">  <span class="number">0x09</span>, <span class="number">0xB6</span>,   <span class="comment">//   Usage (Scan Prev)</span></span><br><span class="line">  <span class="number">0x09</span>, <span class="number">0xB7</span>,   <span class="comment">//   Usage (Stop)</span></span><br><span class="line">  <span class="number">0x15</span>, <span class="number">0x01</span>,   <span class="comment">//   Logical Min (1)</span></span><br><span class="line">  <span class="number">0x25</span>, <span class="number">0x0C</span>,   <span class="comment">//   Logical Max (12)</span></span><br><span class="line">  <span class="number">0x75</span>, <span class="number">0x04</span>,   <span class="comment">//   Report Size (4)</span></span><br><span class="line">  <span class="number">0x95</span>, <span class="number">0x01</span>,   <span class="comment">//   Report Count (1)</span></span><br><span class="line">  <span class="number">0x81</span>, <span class="number">0x00</span>,   <span class="comment">//   Input (Data, Ary, Abs)</span></span><br><span class="line">  <span class="number">0x09</span>, <span class="number">0x80</span>,   <span class="comment">//   Usage (Selection)</span></span><br><span class="line">  <span class="number">0xA1</span>, <span class="number">0x02</span>,   <span class="comment">//   Collection (Logical)</span></span><br><span class="line">  <span class="number">0x05</span>, <span class="number">0x09</span>,   <span class="comment">//     Usage Pg (Button)</span></span><br><span class="line">  <span class="number">0x19</span>, <span class="number">0x01</span>,   <span class="comment">//     Usage Min (Button 1)</span></span><br><span class="line">  <span class="number">0x29</span>, <span class="number">0x03</span>,   <span class="comment">//     Usage Max (Button 3)</span></span><br><span class="line">  <span class="number">0x15</span>, <span class="number">0x01</span>,   <span class="comment">//     Logical Min (1)</span></span><br><span class="line">  <span class="number">0x25</span>, <span class="number">0x03</span>,   <span class="comment">//     Logical Max (3)</span></span><br><span class="line">  <span class="number">0x75</span>, <span class="number">0x02</span>,   <span class="comment">//     Report Size (2)</span></span><br><span class="line">  <span class="number">0x81</span>, <span class="number">0x00</span>,   <span class="comment">//     Input (Data, Ary, Abs)</span></span><br><span class="line">  <span class="number">0xC0</span>,           <span class="comment">//   End Collection</span></span><br><span class="line">  <span class="number">0x81</span>, <span class="number">0x03</span>,   <span class="comment">//   Input (Const, Var, Abs)</span></span><br><span class="line">  <span class="number">0xC0</span>,            <span class="comment">// End Collection</span></span><br><span class="line">  <span class="number">0x06</span>, <span class="number">0xFF</span>, <span class="number">0xFF</span>, <span class="comment">// Usage Page(Vendor defined)</span></span><br><span class="line">  <span class="number">0x09</span>, <span class="number">0xA5</span>,       <span class="comment">// Usage(Vendor Defined)</span></span><br><span class="line">  <span class="number">0xA1</span>, <span class="number">0x01</span>,       <span class="comment">// Collection(Application)</span></span><br><span class="line">  <span class="number">0x85</span>, <span class="number">0x04</span>,   <span class="comment">// Report Id (4)</span></span><br><span class="line">  <span class="number">0x09</span>, <span class="number">0xA6</span>,   <span class="comment">// Usage(Vendor defined)</span></span><br><span class="line">  <span class="number">0x09</span>, <span class="number">0xA9</span>,   <span class="comment">// Usage(Vendor defined)</span></span><br><span class="line">  <span class="number">0x75</span>, <span class="number">0x08</span>,   <span class="comment">// Report Size</span></span><br><span class="line">  <span class="number">0x95</span>, <span class="number">0x7F</span>,   <span class="comment">// Report Count = 127 Btyes</span></span><br><span class="line">  <span class="number">0x91</span>, <span class="number">0x02</span>,   <span class="comment">// Output(Data, Variable, Absolute)</span></span><br><span class="line">  <span class="number">0xC0</span>,         <span class="comment">// End Collection</span></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">BluetoothService</span> &#123;</span></span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">  BLEHIDDevice* hid;</span><br><span class="line">  BLEAdvertising *pAdvertising;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">  BLECharacteristic* input;</span><br><span class="line">  BLECharacteristic* output;</span><br><span class="line"></span><br><span class="line">  BluetoothService();</span><br><span class="line">  <span class="function"><span class="keyword">void</span> <span class="title">startAdvertising</span><span class="params">()</span></span>;</span><br><span class="line">  <span class="function"><span class="keyword">void</span> <span class="title">stopAdvertising</span><span class="params">()</span></span>;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">BluetoothCallbacks</span>:</span> <span class="keyword">public</span> BLEServerCallbacks &#123;</span><br><span class="line">  BluetoothService* service;</span><br><span class="line">  <span class="function"><span class="keyword">void</span> <span class="title">onConnect</span><span class="params">(BLEServer* _)</span></span>;</span><br><span class="line">  <span class="function"><span class="keyword">void</span> <span class="title">onDisconnect</span><span class="params">(BLEServer* pServer)</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">  BluetoothCallbacks(BluetoothService* service);</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">BluetoothOutputCallbacks</span> :</span> <span class="keyword">public</span> BLECharacteristicCallbacks &#123;</span><br><span class="line">  <span class="function"><span class="keyword">void</span> <span class="title">onWrite</span><span class="params">(BLECharacteristic* me)</span></span>;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">endif</span> <span class="comment">// BLUETOOTH_SERVICE_H_</span></span></span><br></pre></td></tr></table></figure><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// BluetoothService.cpp</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">ifndef</span> BLUETOOTH_SERVICE_CPP_</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> BLUETOOTH_SERVICE_CPP_</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"BluetoothService.h"</span></span></span><br><span class="line"></span><br><span class="line">BluetoothCallbacks::BluetoothCallbacks(BluetoothService* service) &#123;</span><br><span class="line">  <span class="keyword">this</span>-&gt;service = service;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">void</span> BluetoothCallbacks::onConnect(BLEServer* _) &#123;</span><br><span class="line">  BLE2902* desc = (BLE2902*)service-&gt;input-&gt;getDescriptorByUUID(BLEUUID((<span class="keyword">uint16_t</span>)<span class="number">0x2902</span>));</span><br><span class="line">  desc-&gt;setNotifications(<span class="literal">true</span>);</span><br><span class="line">  bluetoothConnected = <span class="literal">true</span>;</span><br><span class="line">  Serial.println(<span class="string">"Bluetooth Connected."</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">void</span> BluetoothCallbacks::onDisconnect(BLEServer* pServer)&#123;</span><br><span class="line">  BLE2902* desc = (BLE2902*)service-&gt;input-&gt;getDescriptorByUUID(BLEUUID((<span class="keyword">uint16_t</span>)<span class="number">0x2902</span>));</span><br><span class="line">  desc-&gt;setNotifications(<span class="literal">false</span>);</span><br><span class="line">  bluetoothConnected = <span class="literal">false</span>;</span><br><span class="line">  Serial.println(<span class="string">"Bluetooth Disconnected."</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">void</span> BluetoothOutputCallbacks::onWrite(BLECharacteristic* me)&#123;</span><br><span class="line">  <span class="keyword">uint8_t</span>* value = (<span class="keyword">uint8_t</span>*)(me-&gt;getValue().c_str());</span><br><span class="line">  Serial.<span class="built_in">printf</span>(<span class="string">"special keys: %d\n"</span>, *value);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">BluetoothService::BluetoothService() &#123;</span><br><span class="line">  BLEDevice::init(<span class="string">"Keyboard Moe"</span>);</span><br><span class="line">  BLEServer *pServer = BLEDevice::createServer();</span><br><span class="line">  pServer-&gt;setCallbacks(<span class="keyword">new</span> BluetoothCallbacks(<span class="keyword">this</span>));</span><br><span class="line"></span><br><span class="line">  hid = <span class="keyword">new</span> BLEHIDDevice(pServer);</span><br><span class="line">  input = hid-&gt;inputReport(<span class="number">1</span>);</span><br><span class="line">  output = hid-&gt;outputReport(<span class="number">1</span>);</span><br><span class="line"></span><br><span class="line">  output-&gt;setCallbacks(<span class="keyword">new</span> BluetoothOutputCallbacks());</span><br><span class="line"></span><br><span class="line">  <span class="built_in">std</span>::<span class="built_in">string</span> manufacturer = <span class="string">"CodeRemixer"</span>;</span><br><span class="line">  hid-&gt;manufacturer()-&gt;setValue(manufacturer);</span><br><span class="line"></span><br><span class="line">  hid-&gt;pnp(<span class="number">0x02</span>, <span class="number">0xe502</span>, <span class="number">0xa111</span>, <span class="number">0x0210</span>);</span><br><span class="line">  BLESecurity *pSecurity = <span class="keyword">new</span> BLESecurity();</span><br><span class="line">  pSecurity-&gt;setAuthenticationMode(ESP_LE_AUTH_BOND);</span><br><span class="line"></span><br><span class="line">  <span class="comment">// https://www.bluetooth.com/wp-content/uploads/Sitecore-Media-Library/Gatt/Xml/Characteristics/org.bluetooth.characteristic.hid_information.xml</span></span><br><span class="line">  hid-&gt;hidInfo(<span class="number">0x00</span>, <span class="number">0x02</span>);</span><br><span class="line"></span><br><span class="line">  hid-&gt;reportMap((<span class="keyword">uint8_t</span>*)HID_REPORT_MAP, <span class="keyword">sizeof</span>(HID_REPORT_MAP));</span><br><span class="line">  hid-&gt;startServices();</span><br><span class="line"></span><br><span class="line">  pAdvertising = pServer-&gt;getAdvertising();</span><br><span class="line">  pAdvertising-&gt;setAppearance(HID_KEYBOARD);</span><br><span class="line">  pAdvertising-&gt;addServiceUUID(hid-&gt;hidService()-&gt;getUUID());</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">void</span> BluetoothService::startAdvertising() &#123;</span><br><span class="line">  pAdvertising-&gt;start();</span><br><span class="line">  Serial.println(<span class="string">"Advertising Started."</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">void</span> BluetoothService::stopAdvertising() &#123;</span><br><span class="line">  pAdvertising-&gt;stop();</span><br><span class="line">  Serial.println(<span class="string">"Advertising Stopped."</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">endif</span> <span class="comment">// BLUETOOTH_SERVICE_CPP_</span></span></span><br></pre></td></tr></table></figure><p>写完发现一个奇怪的事情就是蓝牙一连接会把循环阻塞，于是直接用 FreeRTOS 来执行蓝牙代码。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// main.cpp</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;Arduino.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;status.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"BluetoothService.cpp"</span></span></span><br><span class="line"></span><br><span class="line">BluetoothService* bluetoothService;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">bluetoothServiceProcess</span><span class="params">(<span class="keyword">void</span>*)</span> </span>&#123;</span><br><span class="line">  bluetoothService = <span class="keyword">new</span> BluetoothService();</span><br><span class="line">  bluetoothService-&gt;startAdvertising();</span><br><span class="line">  delay(portMAX_DELAY);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">setup</span><span class="params">()</span> </span>&#123;</span><br><span class="line">  Serial.begin(<span class="number">115200</span>);</span><br><span class="line">  Serial.println(<span class="string">"Moe Keyboard is Starting Up..."</span>);</span><br><span class="line"></span><br><span class="line">  xTaskCreate(bluetoothServiceProcess, <span class="string">"bluetooth_server"</span>, <span class="number">20000</span>, <span class="literal">NULL</span>, <span class="number">5</span>, <span class="literal">NULL</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="4x3-键盘矩阵"><a href="#4x3-键盘矩阵" class="headerlink" title="4x3 键盘矩阵"></a>4x3 键盘矩阵</h2><p>接下来就是需要调键盘按键了，一个节省 pin 的典型设计就是键盘矩阵。为了解耦，这里使用的是键盘矩阵套件，等测试通过后才会换成正式的键盘矩阵。我买的是 <a href="http://akizukidenshi.com/catalog/g/gK-12229/" target="_blank" rel="noopener">4x3 键盘矩阵套件</a>。</p><p><img src="/static/keyboard-matrix-kit-1.jpg" alt="Keyboard Matrix"></p><p>买回来花了两个小时自己焊接了起来。比较奇怪的是二极管正负极标注和脚的长度不匹配，吓得我赶紧用万用表出来重新测了一下。</p><p><img src="/static/keyboard-matrix-kit-2.jpg" alt="Keyboard Matrix"></p><p>焊得非常吃力，焊完反应过来，把焊台温度调得太低了…</p><p><img src="/static/keyboard-matrix-kit-3.jpg" alt="Keyboard Matrix"><br><img src="/static/keyboard-matrix-kit-4.png" alt="Keyboard Matrix"></p><h2 id="键盘矩阵扫描"><a href="#键盘矩阵扫描" class="headerlink" title="键盘矩阵扫描"></a>键盘矩阵扫描</h2><p>这个键盘矩阵套件自带上拉电阻，这和最后我的矩阵有一定出入（因为我还要实现灯阵），但程序还是差不多的。</p><p>一开始我选的是 34 35 32 33 25 26 27 这几 pin 来做。结果，写完后发现前两排按键死活不能用。一开始以为自己焊接短路了，用万用表测了半天也没找到短路点。以防万一又重新焊了一遍结果问题依旧。</p><p>最后查了一下发现 GPIO 34 35 36 39 是<a href="https://randomnerdtutorials.com/esp32-pinout-reference-gpios/" target="_blank" rel="noopener">无法作为 output 模式运行</a>的，最后把需要 output 的更换到了 19 18 和 5 上。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// gpio.h</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">ifndef</span> GPIO_H_</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> GPIO_H_</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"KeyCode.cpp"</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">static</span> <span class="keyword">const</span> <span class="keyword">uint8_t</span> COL_NUM = <span class="number">3</span>;</span><br><span class="line"><span class="keyword">static</span> <span class="keyword">const</span> <span class="keyword">uint8_t</span> ROW_NUM = <span class="number">4</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">static</span> <span class="keyword">const</span> <span class="keyword">uint8_t</span> COL_GPIO[] = &#123;</span><br><span class="line">  <span class="number">19</span>, <span class="number">18</span>, <span class="number">5</span></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">static</span> <span class="keyword">const</span> <span class="keyword">uint8_t</span> ROW_GPIO[] = &#123;</span><br><span class="line">  <span class="number">33</span>, <span class="number">25</span>, <span class="number">26</span>, <span class="number">27</span></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">static</span> <span class="keyword">const</span> KeyCode* KEYCODE_MAP[] = &#123;</span><br><span class="line">  <span class="keyword">new</span> KeyCode(NORMAL, <span class="number">0x55</span>), <span class="comment">// *</span></span><br><span class="line">  <span class="keyword">new</span> KeyCode(NORMAL, <span class="number">0x5f</span>), <span class="comment">// 7</span></span><br><span class="line">  <span class="keyword">new</span> KeyCode(NORMAL, <span class="number">0x5c</span>), <span class="comment">// 4</span></span><br><span class="line">  <span class="keyword">new</span> KeyCode(NORMAL, <span class="number">0x59</span>), <span class="comment">// 1</span></span><br><span class="line">  <span class="keyword">new</span> KeyCode(NORMAL, <span class="number">0x62</span>), <span class="comment">// 0</span></span><br><span class="line">  <span class="keyword">new</span> KeyCode(NORMAL, <span class="number">0x80</span>), <span class="comment">// 8</span></span><br><span class="line">  <span class="keyword">new</span> KeyCode(NORMAL, <span class="number">0x5d</span>), <span class="comment">// 5</span></span><br><span class="line">  <span class="keyword">new</span> KeyCode(NORMAL, <span class="number">0x5a</span>), <span class="comment">// 2</span></span><br><span class="line">  <span class="keyword">new</span> KeyCode(NORMAL, <span class="number">0xcc</span>), <span class="comment">// #</span></span><br><span class="line">  <span class="keyword">new</span> KeyCode(NORMAL, <span class="number">0x61</span>), <span class="comment">// 9</span></span><br><span class="line">  <span class="keyword">new</span> KeyCode(NORMAL, <span class="number">0x5e</span>), <span class="comment">// 6</span></span><br><span class="line">  <span class="keyword">new</span> KeyCode(NORMAL, <span class="number">0x5b</span>), <span class="comment">// 3</span></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">static</span> <span class="keyword">bool</span> keyStatus[COL_NUM][ROW_NUM] = &#123; <span class="literal">false</span> &#125;;</span><br><span class="line"><span class="keyword">static</span> <span class="keyword">bool</span> keyStatusSaved[COL_NUM][ROW_NUM] = &#123; <span class="literal">false</span> &#125;;</span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">endif</span> <span class="comment">// GPIO_H_</span></span></span><br></pre></td></tr></table></figure><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// KeyCode.h</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">ifndef</span> KEYCODE_H_</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> KEYCODE_H_</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">enum</span> KeyType &#123;</span><br><span class="line">  MULTIMEDIA,</span><br><span class="line">  MODIFIER,</span><br><span class="line">  NORMAL,</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">KeyCode</span> &#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">  KeyType type;</span><br><span class="line">  <span class="keyword">uint8_t</span> code;</span><br><span class="line"></span><br><span class="line">  KeyCode(KeyType type, <span class="keyword">uint8_t</span> code);</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">endif</span> <span class="comment">// KEYCODE_H_</span></span></span><br></pre></td></tr></table></figure><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// KeyCode.cpp</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">ifndef</span> KEYCODE_CPP_</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> KEYCODE_CPP_</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"KeyCode.h"</span></span></span><br><span class="line"></span><br><span class="line">KeyCode::KeyCode(KeyType type, <span class="keyword">uint8_t</span> code) &#123;</span><br><span class="line">  <span class="keyword">this</span>-&gt;type = type;</span><br><span class="line">  <span class="keyword">this</span>-&gt;code = code;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">endif</span> <span class="comment">// KEYCODE_CPP_</span></span></span><br></pre></td></tr></table></figure><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;Arduino.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;status.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"gpio.h"</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"BluetoothService.cpp"</span></span></span><br><span class="line"></span><br><span class="line">BluetoothService* bluetoothService;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">bluetoothServiceProcess</span><span class="params">(<span class="keyword">void</span>*)</span> </span>&#123;</span><br><span class="line">  bluetoothService = <span class="keyword">new</span> BluetoothService();</span><br><span class="line">  bluetoothService-&gt;startAdvertising();</span><br><span class="line">  delay(portMAX_DELAY);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">setup</span><span class="params">()</span> </span>&#123;</span><br><span class="line">  Serial.begin(<span class="number">115200</span>);</span><br><span class="line">  Serial.println(<span class="string">"Moe Keyboard is Starting Up..."</span>);</span><br><span class="line"></span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">uint8_t</span> i = <span class="number">0</span>; i &lt; COL_NUM; i++) &#123;</span><br><span class="line">    pinMode(COL_GPIO[i], OUTPUT);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">uint8_t</span> i = <span class="number">0</span>; i &lt; ROW_NUM; i++) &#123;</span><br><span class="line">    pinMode(ROW_GPIO[i], INPUT);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  xTaskCreate(bluetoothServiceProcess, <span class="string">"bluetooth_server"</span>, <span class="number">20000</span>, <span class="literal">NULL</span>, <span class="number">5</span>, <span class="literal">NULL</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">loop</span><span class="params">()</span> </span>&#123;</span><br><span class="line">  <span class="comment">// Matrix Scan</span></span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">uint8_t</span> i = <span class="number">0</span>; i &lt; COL_NUM; i++) &#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">uint8_t</span> j = <span class="number">0</span>; j &lt; COL_NUM; j++)</span><br><span class="line">      i == j ? digitalWrite(COL_GPIO[j], LOW) : digitalWrite(COL_GPIO[j], HIGH);</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">uint8_t</span> j = <span class="number">0</span>; j &lt; ROW_NUM; j++) &#123;</span><br><span class="line">      keyStatus[i][j] = !digitalRead(ROW_GPIO[j]);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// Output</span></span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">uint8_t</span> i = <span class="number">0</span>; i &lt; COL_NUM; i++) &#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">uint8_t</span> j = <span class="number">0</span>; j &lt; ROW_NUM; j++) &#123;</span><br><span class="line">      <span class="keyword">if</span> (keyStatus[i][j] == <span class="literal">true</span> &amp;&amp; keyStatusSaved[i][j] == <span class="literal">false</span>) &#123;</span><br><span class="line">        Serial.<span class="built_in">printf</span>(<span class="string">"Key Down: (col: %d, row: %d, code: %d)\n"</span>, i, j, KEYCODE_MAP[i * ROW_NUM + j]-&gt;code);</span><br><span class="line">      &#125; <span class="keyword">else</span> <span class="keyword">if</span>  (keyStatus[i][j] == <span class="literal">false</span> &amp;&amp; keyStatusSaved[i][j] == <span class="literal">true</span>) &#123;</span><br><span class="line">        Serial.<span class="built_in">printf</span>(<span class="string">"Key Up: (col: %d, row: %d, code: %d)\n"</span>, i, j, KEYCODE_MAP[i * ROW_NUM + j]-&gt;code);</span><br><span class="line">      &#125;</span><br><span class="line">      keyStatusSaved[i][j] = keyStatus[i][j];</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  delay(<span class="number">1</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>运行结果：</p><p><img src="/static/matrix-scan.png" alt="Matrix Scan"></p><p>完美。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;前情回顾&quot;&gt;&lt;a href=&quot;#前情回顾&quot; class=&quot;headerlink&quot; title=&quot;前情回顾&quot;&gt;&lt;/a&gt;前情回顾&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://coderemixer.com/2020/02/16/moe-keyboard
      
    
    </summary>
    
    
      <category term="键盘" scheme="https://coderemixer.com/tags/%E9%94%AE%E7%9B%98/"/>
    
  </entry>
  
  <entry>
    <title>「Keyboard Moe」从零开始自制键盘（一）：硬件设计</title>
    <link href="https://coderemixer.com/2020/02/16/moe-keyboard-log-1/"/>
    <id>https://coderemixer.com/2020/02/16/moe-keyboard-log-1/</id>
    <published>2020-02-16T06:43:03.000Z</published>
    <updated>2020-02-21T01:05:09.348Z</updated>
    
    <content type="html"><![CDATA[<h2 id="需求探究"><a href="#需求探究" class="headerlink" title="需求探究"></a>需求探究</h2><p>我从去年就考虑做一把自己的键盘。其需要满足下面的需求：</p><ul><li>便携性：提供不少于 70 键的键盘矩阵，支持蓝牙连接。</li><li>电池管理：能够对锂电池进行充放电，并监控电池电量状态。</li><li>接口现代：支持 Type-C 接口，可以自动在蓝牙和 USB HID 模式切换（方便装机等场景）。</li><li>矢量控制：提供一个类似于小红点的推杆，可以临时替代鼠标。</li><li>人体工学布局：由于我的打字键位并不是非常标准，导致现有的人体工学布局用起来非常难受。所以我考虑做一个有两排重复按键的人体工学配列。</li></ul><p>一个简单的想法就是基于开源的 GH60 方案二次开发。我手上有一把白嫖来的 <a href="https://help.ydkb.io/doku.php?id=en:keyboards:chicory" target="_blank" rel="noopener">Chicory</a>，其设计基本还是和 GH60 一致的围绕 Atmega32u4 设计的方案，蓝牙部分再单独连接到 MDBT40 模组（nRF51822）。这个方案的优缺点很明显，优点是可以很好沿用 AVR 相关的软件栈（特别是 <a href="https://github.com/tmk/tmk_keyboard" target="_blank" rel="noopener">tmk_keyboard</a>）。缺点方面一个是贵，官方套件卖到了 120 美金，光 MDBT40-256RV3 模组就要 7 美金；另一方面 GH60 方案已经几乎把 Atmega32u4 的 I/O 口用完了，要想再加一些我上面的那些功能就很困难。</p><p>于是本着吃螃蟹的想法，我决定自己设计一个键盘方案出来。我自己没有专业学习过模拟电路、数字电路，所以也是一遍做一遍学，折腾了大半个月，在去年的 9 月左右进行了第一次的打样。打样的结果非常失败，由于一些设计缺陷，导致最后连上电都存在问题。</p><p><img src="/static/pcb-moe-legacy.jpg" alt="第一版设计图"></p><p>芯片方案这边选的是 ESP32，虽然这芯片本职是做 WiFi 的，但是作为蓝牙芯片也是非常便宜的。但是 ESP32 不支持 USB 主控，于是最后又迫不得已加了 Atmega32u4 来做 USB 主控。实际拿到生产的板子发现，USB Type-C 接口沉板没做，硬飞上去发现 CC 没有接下拉电阻导致识别也有问题。在我的设计中，ESP32 芯片的固件会由 Atmega32u4 刷入，光整明白这个刷机流程就非常困难。耦合度太高，导致调试非常困难，光布线就遇到很多难题，最后 PCB 弄了四层板进一步提高了生产成本。最后 BOM 单下来，一片得有个好几百。就算不考虑钱的问题，这键盘的尺寸很尴尬，上面一堆贴片件，开钢网又特别大，焊一次就得一天，一直试错下去也不是个办法。</p><h2 id="Moe-Modular-Open-Ergonomics"><a href="#Moe-Modular-Open-Ergonomics" class="headerlink" title="Moe (Modular Open Ergonomics)"></a>Moe (Modular Open Ergonomics)</h2><p>在第一次失败后，我就考虑把设计拆成两个部分，进行模块化设计。</p><p>一个是具备所有逻辑功能的核心板 (moe-core) 和键盘矩阵灯阵板 (moe-71)。核心板包括电源管理、蓝牙管理、USB 管理、固件管理等所有功能，通过一个 FPC 连接器连接到矩阵板上。这样我可以先优先调试核心板，在面包板上随便搭个矩阵就能调试。FPC 提供 1A 的 5V、800mA 的 3.3V、800mA 的 GND 以及 4 个 ADC pin（用来做小红点推杆），剩下的就是一个 20 个键盘矩阵（默认配置 15x5）。所以也方便之后出不同配列的键盘，只需要换个矩阵板就行，不需要再画那堆复杂的逻辑功能。新的 MCU 选型还是 ESP32，但是去掉了 Atmega32u4。</p><p>Atmega32u4 首先不便宜，对于那个性能来说，非常划不来。相反，我上了一片 <a href="http://www.wch.cn/products/CH9329.html" target="_blank" rel="noopener">CH9329</a>，芯片内已经做好了 HID 鼠标和键盘的封装，BOM 成本只有 3.8 元一片，非常划算。</p><p>另外还给这次的板子加上了一片 <a href="https://www.silabs.com/products/development-tools/software/usb-to-uart-bridge-vcp-drivers" target="_blank" rel="noopener">CP2102</a>，从而提供了板上的 USB 刷机口，即插即刷。还有一点吸取教训的，就是在一些辅助功能上都加了一个 0 Ohm 的贴片电阻。如果测试下来硬件上有问题，可以直接把电阻撬了，也不影响其它功能的调试。</p><p>电源方面基本就找了个充电宝的外围芯片 IP5206，能做到 1.5A 充电和 2A 放电，还自带电量查询和手电筒功能（虽然被我串了个电容禁用了，应该没有人想要把键盘当手电筒用）。出来后接到 LDO 上，做一个 3.3V 1A 的输出。</p><p>最后设计出来的核心板的尺寸是 14cm x 3cm。如果使用 <a href="https://www.nordicsemi.com/Products/Low-power-short-range-wireless/nRF5340" target="_blank" rel="noopener">nRF5340</a> 的方案应该尺寸能进一步减少，还能用上蓝牙 5.1 的新特性。就是 nRF5340 太贵，而且模块难买（业余项目没有精力去调射频参数）就放弃了。</p><p>花了一上午来布线，最后折腾来折腾去，把布线控制在了两层板里，于是不需要用到四层板进一步降低了成本。最后合算下来的 BOM 成本在每套 45 元，加上板子和 SMT 的钱，核心板套件的成本在 65 元以内。比 Chicory 功能更丰富，加上配列板的推荐成本还是能控制在 90 元以内，还是颇有价格优势的。</p><p><img src="/static/moe-core-feb.png" alt="电路图"></p><p><img src="/static/pcb-moe-feb-a.png" alt="正面"></p><p><img src="/static/pcb-moe-feb-b.png" alt="背面"></p><p>工程（MIT 协议）：<a href="https://oshwhub.com/dsh0416/moe-core" target="_blank" rel="noopener">https://oshwhub.com/dsh0416/moe-core</a></p><h2 id="挖坑"><a href="#挖坑" class="headerlink" title="挖坑"></a>挖坑</h2><p>等疫情过去了流出来调试。</p><ul><li>2019.2.17 更新，加了一个退耦电容以防万一。修正了螺丝孔位的位置，并使固定螺丝焊盘接地。</li><li>2019.2.18 更新，修改了三个肖特基二极管以支持充电电压。</li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;需求探究&quot;&gt;&lt;a href=&quot;#需求探究&quot; class=&quot;headerlink&quot; title=&quot;需求探究&quot;&gt;&lt;/a&gt;需求探究&lt;/h2&gt;&lt;p&gt;我从去年就考虑做一把自己的键盘。其需要满足下面的需求：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;便携性：提供不少于 70 键的键盘矩阵，支
      
    
    </summary>
    
    
      <category term="键盘" scheme="https://coderemixer.com/tags/%E9%94%AE%E7%9B%98/"/>
    
  </entry>
  
  <entry>
    <title>硬核解谜 Prolog 入门 —— 13 Archetypes: Skeptic</title>
    <link href="https://coderemixer.com/2020/01/18/archetypes-skeptic/"/>
    <id>https://coderemixer.com/2020/01/18/archetypes-skeptic/</id>
    <published>2020-01-18T13:29:29.000Z</published>
    <updated>2020-01-18T13:32:58.907Z</updated>
    
    <content type="html"><![CDATA[<p>13 Archetypes: Skeptic 的谜题由三个单独的谜题组成。这三个谜题唯一的共同点就是，它们都有一个错误。</p><p><img src="/static/archetypes-skeptic.jpg" alt="13 Archetypes: Skeptic"></p><p>第二个谜题是「数迷」，第三个就是个数学的填字游戏（crossword），其实没什么好讲的，我们来好好讲一下第一个谜题。</p><h2 id="起因"><a href="#起因" class="headerlink" title="起因"></a>起因</h2><p>第一个谜题是一个可以完全用一阶谓词逻辑来描述的问题，也就是使用「断言」「量化」和命题的组合来描述。</p><p>上了一年我们学校萩野達也教授的计算理论 + 逻辑课。萩野教授是日本研究第五代计算机时候成长出来的计算机科学家，数学基础异常过硬，和现在天天写 JavaScript、Python 还叫苦不迭的这些 CS 学生完全不在一个级别上。</p><p>上了萩野一年课之后，我觉得我翅膀也硬了。既然这玩意可以用一阶谓词逻辑来描述，那么应该可以用 Prolog 来解决。第一个题目因为答案选项里有 E、1、3、A、R，因为 13 Archetypes 所有题目都以 13AR 结束，所以显然根本不用看题就知道答案是 E13AR。但如果仔仔细细做一做的话你会发现，其实 10 分钟也做完了。</p><p>但是我不管，我就要用 Prolog 来解决，重现一下上世纪 90 年代人工智能研究的荣耀。</p><h2 id="Prolog-是什么？"><a href="#Prolog-是什么？" class="headerlink" title="Prolog 是什么？"></a>Prolog 是什么？</h2><p>Prolog 是 Programming in Logic 的缩写。Prolog 程序基于一阶谓词逻辑理论。基本就是描述逻辑，然后让 Prolog 解释器来求解。我这里使用的 Prolog 解释器是 SWI-Prolog。SWI-Prolog 是一个从 1987 年开始开发的自由的 Prolog 解释器。我毕竟也不是 Prolog 语言的专家，对我来说找个开源软件临时用一下就行了。</p><p>Prolog 的语法非常简单，几分钟就上手了。Prolog 里大写开头的字母就是变量，其他的就是常量，每个语句必须以句号结尾。第一步是描述事实，比如 Alice 是一个人：</p><figure class="highlight prolog"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">human(alice).</span><br></pre></td></tr></table></figure><p>事实可以是一个常量的事实，也可以是多个常量之间的，比如 Alice 喜欢 Bob：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">likes(alice, bob).</span><br></pre></td></tr></table></figure><p>然后就是推理关系。符号是 <code>:-</code> ，符号后面的如果成立，那么符号前面的也会成立，比如两个人互相喜欢，那么他们就是朋友：</p><figure class="highlight prolog"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">friend(<span class="symbol">X</span>, <span class="symbol">Y</span>) :-</span><br><span class="line">likes(<span class="symbol">X</span>, <span class="symbol">Y</span>),</span><br><span class="line">likes(<span class="symbol">Y</span>, <span class="symbol">X</span>).</span><br></pre></td></tr></table></figure><p>其中 <code>,</code> 逗号表示「且 (and)」，如果是「或 (or)」那么就是 <code>;</code> 分号。然后 <code>\+</code> 表示否，最后还可以用 <code>()</code> 来组合它们，基本上这就是基本逻辑了。</p><p>比如冬马喜欢春希，雪菜喜欢冬马和春希，春希没有去音乐会。</p><figure class="highlight prolog"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">human(haruki).</span><br><span class="line">human(touma).</span><br><span class="line">human(setsuna).</span><br><span class="line"></span><br><span class="line">likes(touma, haruki).</span><br><span class="line">likes(setsuna, haruki).</span><br><span class="line">likes(setsuna, touma).</span><br><span class="line"></span><br><span class="line">friend(<span class="symbol">X</span>, <span class="symbol">Y</span>) :-</span><br><span class="line">human(<span class="symbol">X</span>),</span><br><span class="line">human(<span class="symbol">Y</span>),</span><br><span class="line">likes(<span class="symbol">X</span>, <span class="symbol">Y</span>),</span><br><span class="line">likes(<span class="symbol">Y</span>, <span class="symbol">X</span>).</span><br></pre></td></tr></table></figure><p>然后我们用 SWI-Prolog 加载这个程序，来看看他们之间谁是朋友。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">❯ swipl white.pl</span><br><span class="line">Welcome to SWI-Prolog (threaded, 64 bits, version 8.0.3)</span><br><span class="line">SWI-Prolog comes with ABSOLUTELY NO WARRANTY. This is free software.</span><br><span class="line">Please run ?- license. for legal details.</span><br><span class="line"></span><br><span class="line">For online help and background, visit http://www.swi-prolog.org</span><br><span class="line">For built-in help, use ?- help(Topic). or ?- apropos(Word).</span><br><span class="line"></span><br><span class="line">?- friend(X, Y).</span><br><span class="line">false.</span><br></pre></td></tr></table></figure><p>程序返回了 <code>false.</code> 显然他们三个当不成朋友。</p><h2 id="写-Prolog"><a href="#写-Prolog" class="headerlink" title="写 Prolog"></a>写 Prolog</h2><p>一开始我花了一个小时，吭哧吭哧就写完了程序。一开始约束条件写得太松散，嵌套太多太复杂，结果跑了好几个小时都没跑出来。</p><blockquote><p>第一次有了喜欢的事情（指数学）。有了能做一辈子的事业（指写代码）。两件快乐事情重合在一起。而这两份快乐，又给我带来更多的快乐。得到的，本该是像梦境一般幸福的时间……但是，为什么，会变成这样呢……</p></blockquote><p>第二天想到了这个问题和一个经典逻辑问题「谁养鱼」是比较类似的，翻了翻正好看到这个问题在 SWI-Prolog 的<a href="https://swish.swi-prolog.org/p/fish_puzzle_marijke.pl" target="_blank" rel="noopener">例子</a>里。学习了一下别人是怎么写的，改了一下程序竟然就秒解了。最后的程序如下：</p><figure class="highlight prolog"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">% 1. Alice is level 7.</span></span><br><span class="line"><span class="comment">% 2. The level 7 agent was in squad Foot-E.</span></span><br><span class="line"><span class="comment">% 3. The agent in squad Foot-E started playing in 2016.</span></span><br><span class="line"><span class="comment">% 4. Alice started playing in 2018.</span></span><br><span class="line"><span class="comment">% 5. The level 16 agent has a founders badge.</span></span><br><span class="line"><span class="comment">% 6. Bob has a gold innovator badge.</span></span><br><span class="line"><span class="comment">% 7. David started playing before Eve, who started playing before Clarie.</span></span><br><span class="line"><span class="comment">% 8. The agent who started playing in 2014 was on squad Bike-1.</span></span><br><span class="line"><span class="comment">% 9. The agent who started playing in 2015 is the recursed level 12 agent.</span></span><br><span class="line"><span class="comment">% 10. The agent in squad Bike-3 was level 9.</span></span><br><span class="line"><span class="comment">% 11. Clarie started playing in 2016.</span></span><br><span class="line"><span class="comment">% 12. The two agents who were on bikes were the agent who started in 2016 and the level 13 agent.</span></span><br><span class="line"><span class="comment">% 13. The level 16 agent was in squad Foot-A.</span></span><br><span class="line"><span class="comment">% 14. The agent who started in 2015 was in squad Foot-R.</span></span><br><span class="line"><span class="comment">% 15. Bob was on a bike.</span></span><br><span class="line"><span class="comment">% 16. The agent who started playing in 2013 was in squad Foot-A.</span></span><br><span class="line"></span><br><span class="line">year(<span class="number">2013</span>). year(<span class="number">2014</span>). year(<span class="number">2015</span>). year(<span class="number">2016</span>). year(<span class="number">2017</span>). year(<span class="number">2018</span>). year(<span class="number">2019</span>).</span><br><span class="line">earlier(<span class="symbol">A</span>, <span class="symbol">B</span>) :- year(<span class="symbol">A</span>), year(<span class="symbol">B</span>), <span class="symbol">A</span> @&lt; <span class="symbol">B</span>.</span><br><span class="line"></span><br><span class="line">agents(<span class="symbol">Ag</span>):-</span><br><span class="line">  <span class="comment">% each agent in the list Ag of agent is represented as:</span></span><br><span class="line">  <span class="comment">%      h(Name, Level, Year, Type, Squad)</span></span><br><span class="line">  length(<span class="symbol">Ag</span>, <span class="number">5</span>),</span><br><span class="line">  member(h(alice, <span class="number">7</span>, <span class="symbol">_</span>, <span class="symbol">_</span>, <span class="symbol">_</span>), <span class="symbol">Ag</span>), <span class="comment">% 1</span></span><br><span class="line">  member(h(<span class="symbol">_</span>, <span class="number">7</span>, <span class="symbol">_</span>, foot, e), <span class="symbol">Ag</span>), <span class="comment">% 2</span></span><br><span class="line">  member(h(<span class="symbol">_</span>, <span class="symbol">_</span>, <span class="number">2016</span>, foot, e), <span class="symbol">Ag</span>), <span class="comment">% 3</span></span><br><span class="line">  member(h(alice, <span class="symbol">_</span>, <span class="number">2018</span>, <span class="symbol">_</span>, <span class="symbol">_</span>), <span class="symbol">Ag</span>), <span class="comment">% 4</span></span><br><span class="line">  member(h(<span class="symbol">_</span>, <span class="number">16</span>, <span class="number">2013</span>, <span class="symbol">_</span>, <span class="symbol">_</span>), <span class="symbol">Ag</span>), <span class="comment">% 5</span></span><br><span class="line">  (member(h(bob, <span class="symbol">_</span>, <span class="number">2014</span>, <span class="symbol">_</span>, <span class="symbol">_</span>), <span class="symbol">Ag</span>); member(h(bob, <span class="symbol">_</span>, <span class="number">2013</span>, <span class="symbol">_</span>, <span class="symbol">_</span>), <span class="symbol">Ag</span>)), <span class="comment">% 6</span></span><br><span class="line">  member(h(david, <span class="symbol">_</span>, <span class="symbol">Yd</span>, <span class="symbol">_</span>, <span class="symbol">_</span>), <span class="symbol">Ag</span>), <span class="comment">% 7</span></span><br><span class="line">  member(h(eve, <span class="symbol">_</span>, <span class="symbol">Ye</span>, <span class="symbol">_</span>, <span class="symbol">_</span>), <span class="symbol">Ag</span>),</span><br><span class="line">  member(h(clarie, <span class="symbol">_</span>, <span class="symbol">Yc</span>, <span class="symbol">_</span>, <span class="symbol">_</span>), <span class="symbol">Ag</span>),</span><br><span class="line">  earlier(<span class="symbol">Yd</span>, <span class="symbol">Ye</span>), earlier(<span class="symbol">Ye</span>, <span class="symbol">Yc</span>),</span><br><span class="line">  member(h(<span class="symbol">_</span>, <span class="symbol">_</span>, <span class="number">2014</span>, bike, one), <span class="symbol">Ag</span>), <span class="comment">% 8</span></span><br><span class="line">  member(h(<span class="symbol">_</span>, <span class="number">12</span>, <span class="number">2015</span>, <span class="symbol">_</span>, <span class="symbol">_</span>), <span class="symbol">Ag</span>), <span class="comment">% 9</span></span><br><span class="line">  member(h(<span class="symbol">_</span>, <span class="number">9</span>, <span class="symbol">_</span>, bike, three), <span class="symbol">Ag</span>), <span class="comment">% 10</span></span><br><span class="line">  member(h(clarie, <span class="symbol">_</span>, <span class="number">2016</span>, <span class="symbol">_</span>, <span class="symbol">_</span>), <span class="symbol">Ag</span>), <span class="comment">% 11</span></span><br><span class="line">  member(h(<span class="symbol">A</span>, <span class="symbol">_</span>, <span class="symbol">_</span>, bike, <span class="symbol">_</span>), <span class="symbol">Ag</span>), <span class="comment">% 12</span></span><br><span class="line">  member(h(<span class="symbol">B</span>, <span class="symbol">_</span>, <span class="symbol">_</span>, bike, <span class="symbol">_</span>), <span class="symbol">Ag</span>),</span><br><span class="line">  \+ <span class="symbol">A</span>=<span class="symbol">B</span>,</span><br><span class="line">  ((member(h(<span class="symbol">A</span>, <span class="number">13</span>, <span class="symbol">_</span>, <span class="symbol">_</span>, <span class="symbol">_</span>), <span class="symbol">Ag</span>), member(h(<span class="symbol">B</span>, <span class="symbol">_</span>, <span class="number">2016</span>, <span class="symbol">_</span>, <span class="symbol">_</span>), <span class="symbol">Ag</span>));</span><br><span class="line">  (member(h(<span class="symbol">B</span>, <span class="number">13</span>, <span class="symbol">_</span>, <span class="symbol">_</span>, <span class="symbol">_</span>), <span class="symbol">Ag</span>), member(h(<span class="symbol">A</span>, <span class="symbol">_</span>, <span class="number">2016</span>, <span class="symbol">_</span>, <span class="symbol">_</span>), <span class="symbol">Ag</span>))),</span><br><span class="line">  member(h(<span class="symbol">_</span>, <span class="number">16</span>, <span class="symbol">_</span>, foot, a), <span class="symbol">Ag</span>), <span class="comment">% 13</span></span><br><span class="line">  member(h(<span class="symbol">_</span>, <span class="symbol">_</span>, <span class="number">2015</span>, foot, r), <span class="symbol">Ag</span>), <span class="comment">% 14</span></span><br><span class="line">  member(h(bob, <span class="symbol">_</span>, <span class="symbol">_</span>, bike, <span class="symbol">_</span>), <span class="symbol">Ag</span>), <span class="comment">% 15</span></span><br><span class="line">  member(h(<span class="symbol">_</span>, <span class="symbol">_</span>, <span class="number">2013</span>, foot, a), <span class="symbol">Ag</span>). <span class="comment">% 16</span></span><br></pre></td></tr></table></figure><p>其中几个需要注意的是，一个是加入年份，为了程序能够在有限的整数空间里搜索，设定了条件：</p><figure class="highlight prolog"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">year(<span class="number">2013</span>). year(<span class="number">2014</span>). year(<span class="number">2015</span>). year(<span class="number">2016</span>). year(<span class="number">2017</span>). year(<span class="number">2018</span>). year(<span class="number">2019</span>).</span><br><span class="line">earlier(<span class="symbol">A</span>, <span class="symbol">B</span>) :- year(<span class="symbol">A</span>), year(<span class="symbol">B</span>), <span class="symbol">A</span> @&lt; <span class="symbol">B</span>.</span><br></pre></td></tr></table></figure><p>然后 Bob 有 Innovator 牌，光这个条件是不能判断具体是 2013 还是 2014 加入游戏的，所以写了一个或条件：</p><figure class="highlight prolog"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">(member(h(bob, <span class="symbol">_</span>, <span class="number">2014</span>, <span class="symbol">_</span>, <span class="symbol">_</span>), <span class="symbol">Ag</span>); member(h(bob, <span class="symbol">_</span>, <span class="number">2013</span>, <span class="symbol">_</span>, <span class="symbol">_</span>), <span class="symbol">Ag</span>)), <span class="comment">% 6</span></span><br></pre></td></tr></table></figure><p>还有一条就是两个自行车队的一个是 2016 年加入的，另一个是 13 级，这句话转换成谓词逻辑有点绕：</p><figure class="highlight prolog"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">member(h(<span class="symbol">A</span>, <span class="symbol">_</span>, <span class="symbol">_</span>, bike, <span class="symbol">_</span>), <span class="symbol">Ag</span>), <span class="comment">% 12</span></span><br><span class="line">member(h(<span class="symbol">B</span>, <span class="symbol">_</span>, <span class="symbol">_</span>, bike, <span class="symbol">_</span>), <span class="symbol">Ag</span>),</span><br><span class="line">\+ <span class="symbol">A</span>=<span class="symbol">B</span>,</span><br><span class="line">((member(h(<span class="symbol">A</span>, <span class="number">13</span>, <span class="symbol">_</span>, <span class="symbol">_</span>, <span class="symbol">_</span>), <span class="symbol">Ag</span>), member(h(<span class="symbol">B</span>, <span class="symbol">_</span>, <span class="number">2016</span>, <span class="symbol">_</span>, <span class="symbol">_</span>), <span class="symbol">Ag</span>));</span><br><span class="line">(member(h(<span class="symbol">B</span>, <span class="number">13</span>, <span class="symbol">_</span>, <span class="symbol">_</span>, <span class="symbol">_</span>), <span class="symbol">Ag</span>), member(h(<span class="symbol">A</span>, <span class="symbol">_</span>, <span class="number">2016</span>, <span class="symbol">_</span>, <span class="symbol">_</span>), <span class="symbol">Ag</span>))),</span><br></pre></td></tr></table></figure><p>跑了一下，当然是 <code>false.</code>。因为其中有一个条件是错误的。于是从第一个条件开始尝试一个个注释掉。</p><p>注释到第四个，秒解：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">❯ swipl archetype.pl </span><br><span class="line">Welcome to SWI-Prolog (threaded, 64 bits, version 8.0.3)</span><br><span class="line">SWI-Prolog comes with ABSOLUTELY NO WARRANTY. This is free software.</span><br><span class="line">Please run ?- license. for legal details.</span><br><span class="line"></span><br><span class="line">For online help and background, visit http://www.swi-prolog.org</span><br><span class="line">For built-in help, use ?- help(Topic). or ?- apropos(Word).</span><br><span class="line"></span><br><span class="line">?- agents(Ag).</span><br><span class="line">Ag = [h(alice, 7, 2016, foot, e), h(david, 16, 2013, foot, a), h(bob, 13, 2014, bike, one), h(eve, 12, 2015, foot, r), h(clarie, 9, 2016, bike, three)] .</span><br></pre></td></tr></table></figure><p>程序给出的第一组解如下（不唯一）：</p><table><thead><tr><th>名字</th><th>级别</th><th>加入年份</th><th>Squad 类型</th><th>Squad 编号</th></tr></thead><tbody><tr><td>Alice</td><td>7</td><td>2016</td><td>Foot</td><td>E</td></tr><tr><td>Bob</td><td>13</td><td>2014</td><td>Bike</td><td>1</td></tr><tr><td>Clarie</td><td>9</td><td>2016</td><td>Bike</td><td>3</td></tr><tr><td>David</td><td>16</td><td>2013</td><td>Foot</td><td>A</td></tr><tr><td>Eve</td><td>12</td><td>2015</td><td>Foot</td><td>R</td></tr></tbody></table><p>答案是 <code>E13AR</code>，完全没有错。</p><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>这个例子很好展示了上世纪 90 年代人工智能研究的奥妙。还有就是不要钻牛角尖，几秒钟就解出来的题不要浪费一天去写代码。但我写了一天才写出来只能说明是我菜，这程序运行只花了几毫秒就找到解了还是挺厉害的。数学的发展可能关乎着真正强人工智能的诞生，希望大家多学数学，少写 JavaScript。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;13 Archetypes: Skeptic 的谜题由三个单独的谜题组成。这三个谜题唯一的共同点就是，它们都有一个错误。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;/static/archetypes-skeptic.jpg&quot; alt=&quot;13 Archetypes: Skeptic
      
    
    </summary>
    
    
      <category term="游戏" scheme="https://coderemixer.com/tags/%E6%B8%B8%E6%88%8F/"/>
    
      <category term="设计" scheme="https://coderemixer.com/tags/%E8%AE%BE%E8%AE%A1/"/>
    
      <category term="Ingress" scheme="https://coderemixer.com/tags/Ingress/"/>
    
      <category term="Prolog" scheme="https://coderemixer.com/tags/Prolog/"/>
    
      <category term="逻辑学" scheme="https://coderemixer.com/tags/%E9%80%BB%E8%BE%91%E5%AD%A6/"/>
    
  </entry>
  
  <entry>
    <title>元胞自动机 101 —— 13 Archetypes: Humanist</title>
    <link href="https://coderemixer.com/2020/01/14/archetypes-humanity/"/>
    <id>https://coderemixer.com/2020/01/14/archetypes-humanity/</id>
    <published>2020-01-14T05:22:47.000Z</published>
    <updated>2020-01-18T08:47:04.930Z</updated>
    
    <content type="html"><![CDATA[<h2 id="序"><a href="#序" class="headerlink" title="序"></a>序</h2><p>前一晚改论文改睡着了，结果错过了。早上醒来发现题目还挺简单的，来聊一聊谜题的出题思路吧。</p><p><img src="https://storage.googleapis.com/ingress-internal-event-data/13archetypes/humanist/humanist2_a6f9854f-6e0c-5050-a10d-91f4aaa4c382.png" alt="题目"></p><h2 id="一种新科学"><a href="#一种新科学" class="headerlink" title="一种新科学"></a>一种新科学</h2><p>元胞自动机是一种由元胞、元胞状态、领域、和状态更新规则构成的一个自动机，其数学表达为：</p><p>$$ A = (L, d, S, N, f) $$</p><p>换成人话就是说，对于一个 d 维度的有限状态矩阵，每次每个格点的状态更新取决于其上一次中周围格点的状态。元胞自动机是研究混沌现象的一个重要模型，在 Wolfram 出版的书籍《一种新科学》（我个人对这是不是一种新科学持保留态度）中被进行了非常深入的探讨。</p><p>Wolfram 把初等一维元胞自动机的全部 256 种规则进行了分类，分成了四类：平稳型、周期型、混沌型、复杂型。</p><ul><li>平稳型就是无论初始局面如何，最后终会变成稳定均匀状态。</li><li>周期性则是无论初始局面如何，最终会变成稳定的震荡结构，随机性会被过滤。</li><li>混沌型指初始局面会演化成一个伪随机或混沌状状态。</li><li>复杂型则是上面的一系列组合，可能会出现混沌，而一部分的初始结构会稳定保留，结构于结构会相互作用。（比如像规则 110 被证明是图灵完备的，那么其局面自然会随着初始输入变化有很大变化，可能稳定可能混沌了。）</li></ul><p>但这个分类有个很大的问题，就是每一个类别几乎都能找到例外。所以这到底是一种新科学还是一种伪科学还是有点迷幻的。</p><h2 id="最有名的元胞自动机"><a href="#最有名的元胞自动机" class="headerlink" title="最有名的元胞自动机"></a>最有名的元胞自动机</h2><p>最有名的元胞自动机是 1970 年由英国数学家约翰·何顿·康威提出的康威生命游戏（Conway’s Game of Life）其规则如下：</p><ul><li>元胞自动机的维度是 2（运行在 2 维平面上）</li><li>状态只有两种，存活和死亡</li><li>当周围存活元胞是 0 个或 1 个时，其会死亡（太孤独了，无聊死了）</li><li>当周围存活元胞是 2 个或 3 个时，保持原样</li><li>当周围存活元胞是 4 个时，该元胞死亡（没饭吃饿死了）</li><li>当周围存活元胞是 3 个，且当前元胞是死亡状态时，该元胞变成存活（模拟繁殖）</li></ul><p>这个游戏按 Wolfram 的分类应该是第四种复杂型。而我们的这个谜题，就是把图输入到这种自动机里，然后跑一下就结束了。</p><h2 id="怎么解题"><a href="#怎么解题" class="headerlink" title="怎么解题"></a>怎么解题</h2><p>模拟它应该是要写个程序的，毕竟手推太麻烦了。Game of Life 的实现大概满世界都是吧。打开 <a href="https://leetcode.com/problems/game-of-life/solution/" target="_blank" rel="noopener">LeetCode</a> 的题解抄下来稍微改改就有了。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> collections</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">gameOfLifeInfinite</span><span class="params">(live)</span>:</span></span><br><span class="line">  ctr = collections.Counter((I, J)</span><br><span class="line">                            <span class="keyword">for</span> i, j <span class="keyword">in</span> live</span><br><span class="line">                            <span class="keyword">for</span> I <span class="keyword">in</span> range(i<span class="number">-1</span>, i+<span class="number">2</span>)</span><br><span class="line">                            <span class="keyword">for</span> J <span class="keyword">in</span> range(j<span class="number">-1</span>, j+<span class="number">2</span>)</span><br><span class="line">                            <span class="keyword">if</span> I != i <span class="keyword">or</span> J != j)</span><br><span class="line">  <span class="keyword">return</span> &#123;ij</span><br><span class="line">    <span class="keyword">for</span> ij <span class="keyword">in</span> ctr</span><br><span class="line">    <span class="keyword">if</span> ctr[ij] == <span class="number">3</span> <span class="keyword">or</span> ctr[ij] == <span class="number">2</span> <span class="keyword">and</span> ij <span class="keyword">in</span> live&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">gameOfLife</span><span class="params">(board)</span>:</span></span><br><span class="line">  live = &#123;(i, j) <span class="keyword">for</span> i, row <span class="keyword">in</span> enumerate(board) <span class="keyword">for</span> j, live <span class="keyword">in</span> enumerate(row) <span class="keyword">if</span> live&#125;</span><br><span class="line">  live = gameOfLifeInfinite(live)</span><br><span class="line">  <span class="keyword">for</span> i, row <span class="keyword">in</span> enumerate(board):</span><br><span class="line">    <span class="keyword">for</span> j <span class="keyword">in</span> range(len(row)):</span><br><span class="line">      row[j] = int((i, j) <span class="keyword">in</span> live)</span><br><span class="line"></span><br><span class="line">board = [[<span class="number">0</span>,<span class="number">1</span>,<span class="number">0</span>],[<span class="number">0</span>,<span class="number">0</span>,<span class="number">1</span>],[<span class="number">1</span>,<span class="number">1</span>,<span class="number">1</span>],[<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>]]</span><br><span class="line">gameOfLife(board)</span><br><span class="line">print(board)</span><br></pre></td></tr></table></figure><p>比较恶心的是，我们怎么去把图片转换成矩阵。据说大多数人都是手弄的。我觉得有点过分了，毕竟也是一个 27 x 27 的超大矩阵，手抄一抄得抄 729 个数字。咱这也不是庙会的抄数字赢钱的摊，咱还是找个自动化的方法来处理吧。</p><p>我们先裁切一下图片，减少一下代码量，变成：</p><p><img src="/static/game-of-life-ingress.png" alt="裁切后图像"></p><p>然后我们写点 OpenCV 的代码来做图像处理和转换，简单来说就是二值化，然后压缩成 27x27（因为像素冗余有够大，直接压大概不会被边框影响到），然后直接除以 255 变成 01 矩阵，跑完打印出来。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> collections</span><br><span class="line"><span class="keyword">import</span> cv2</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">gameOfLifeInfinite</span><span class="params">(live)</span>:</span></span><br><span class="line">  ctr = collections.Counter((I, J)</span><br><span class="line">                            <span class="keyword">for</span> i, j <span class="keyword">in</span> live</span><br><span class="line">                            <span class="keyword">for</span> I <span class="keyword">in</span> range(i<span class="number">-1</span>, i+<span class="number">2</span>)</span><br><span class="line">                            <span class="keyword">for</span> J <span class="keyword">in</span> range(j<span class="number">-1</span>, j+<span class="number">2</span>)</span><br><span class="line">                            <span class="keyword">if</span> I != i <span class="keyword">or</span> J != j)</span><br><span class="line">  <span class="keyword">return</span> &#123;ij</span><br><span class="line">    <span class="keyword">for</span> ij <span class="keyword">in</span> ctr</span><br><span class="line">    <span class="keyword">if</span> ctr[ij] == <span class="number">3</span> <span class="keyword">or</span> ctr[ij] == <span class="number">2</span> <span class="keyword">and</span> ij <span class="keyword">in</span> live&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">gameOfLife</span><span class="params">(board)</span>:</span></span><br><span class="line">  live = &#123;(i, j) <span class="keyword">for</span> i, row <span class="keyword">in</span> enumerate(board) <span class="keyword">for</span> j, live <span class="keyword">in</span> enumerate(row) <span class="keyword">if</span> live&#125;</span><br><span class="line">  live = gameOfLifeInfinite(live)</span><br><span class="line">  <span class="keyword">for</span> i, row <span class="keyword">in</span> enumerate(board):</span><br><span class="line">    <span class="keyword">for</span> j <span class="keyword">in</span> range(len(row)):</span><br><span class="line">      row[j] = int((i, j) <span class="keyword">in</span> live)</span><br><span class="line"></span><br><span class="line">img = cv2.imread(<span class="string">'/Users/delton/Desktop/game-of-life-ingress.png'</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># Convert RGB to Binary Image</span></span><br><span class="line">ret, bw_img = cv2.threshold(img, <span class="number">127</span>, <span class="number">255</span>, cv2.THRESH_BINARY)</span><br><span class="line"></span><br><span class="line"><span class="comment"># Convert to 27x27</span></span><br><span class="line"><span class="comment"># 反正像素冗余那么大，直接转换多半不会出问题</span></span><br><span class="line">resized_image = cv2.resize(bw_img, (<span class="number">27</span>, <span class="number">27</span>))</span><br><span class="line"></span><br><span class="line"><span class="comment"># Pick Channel 0 only</span></span><br><span class="line">board = resized_image[:, :, <span class="number">0</span>] / <span class="number">255</span></span><br><span class="line">gameOfLife(board)</span><br><span class="line">print(board)</span><br><span class="line"></span><br><span class="line"><span class="comment"># Revert Black and White</span></span><br><span class="line">cv2.imshow(<span class="string">"Result"</span>, <span class="number">1.0</span> - board)</span><br><span class="line">cv2.waitKey(<span class="number">0</span>)</span><br><span class="line">cv2.destroyAllWindows()</span><br></pre></td></tr></table></figure><p>结果：</p><p><img src="/static/humanity-result.png" alt="解码结果"></p><p>扫码：</p><p><img src="/static/humanity-scan.jpg" alt="扫码结果"></p><p>结束。</p><h2 id="扩展阅读"><a href="#扩展阅读" class="headerlink" title="扩展阅读"></a>扩展阅读</h2><ul><li><p><a href="https://youtu.be/GQNREcMVPHY" target="_blank" rel="noopener">生命游戏：另一种计算机 —— 混乱博物馆</a></p></li><li><p><a href="https://www.youtube.com/watch?v=2lfVFOXzonY" target="_blank" rel="noopener">混沌与分形 —— MommyTalk</a></p></li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;序&quot;&gt;&lt;a href=&quot;#序&quot; class=&quot;headerlink&quot; title=&quot;序&quot;&gt;&lt;/a&gt;序&lt;/h2&gt;&lt;p&gt;前一晚改论文改睡着了，结果错过了。早上醒来发现题目还挺简单的，来聊一聊谜题的出题思路吧。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://stor
      
    
    </summary>
    
    
      <category term="元胞自动机" scheme="https://coderemixer.com/tags/%E5%85%83%E8%83%9E%E8%87%AA%E5%8A%A8%E6%9C%BA/"/>
    
      <category term="混沌" scheme="https://coderemixer.com/tags/%E6%B7%B7%E6%B2%8C/"/>
    
      <category term="游戏" scheme="https://coderemixer.com/tags/%E6%B8%B8%E6%88%8F/"/>
    
      <category term="设计" scheme="https://coderemixer.com/tags/%E8%AE%BE%E8%AE%A1/"/>
    
      <category term="Ingress" scheme="https://coderemixer.com/tags/Ingress/"/>
    
  </entry>
  
  <entry>
    <title>从 bopomofo 说起 —— 学习注音符号后对拼音系统的一些新体悟</title>
    <link href="https://coderemixer.com/2020/01/10/from-bopomofo/"/>
    <id>https://coderemixer.com/2020/01/10/from-bopomofo/</id>
    <published>2020-01-10T13:06:49.000Z</published>
    <updated>2020-01-10T13:23:43.679Z</updated>
    
    <content type="html"><![CDATA[<h2 id="一些理由"><a href="#一些理由" class="headerlink" title="一些理由"></a>一些理由</h2><p>众所周知，我从小接受的用于标记现代标准汉语的系统是「汉语拼音」。两年前，我决定学习一下「注音符号」。注音符号是以章太炎编创的「纽文」、「韵文」为蓝本，设计的一套汉语拼音方案。其实最早决定去学的原因还是好奇好玩，用一套完全不熟悉的拼读系统来学习自己已经掌握的汉语发音，可以很好从另一个方面来认识汉语的发音系统。最后也证明这样的形式确实帮助我从某种角度重新认识了汉语发音，特别是当这套系统和汉语拼音符号本身产生差异的时候，通过深究差异产生的原因，极大提高了我对汉语发音的理解，可以说是受益良多。下面就来分享一些，我学习过程中遇到的一些有意思的事情。</p><p>先放一个我在 YouTube 上看到的「注音符号歌」，让没有听说过这个系统的人有个大概的印象。</p><iframe width="560" height="315" src="https://www.youtube.com/embed/n0G-cKUkt3c" frameborder="0" allow="accelerometer; autoplay; encrypted-media; gyroscope; picture-in-picture" allowfullscreen></iframe><p>（比较可怕的是这个影片播放完后的推荐影片里都是一些真的不明所以非常奇怪的儿童影片）</p><h2 id="前四个声母"><a href="#前四个声母" class="headerlink" title="前四个声母"></a>前四个声母</h2><p>一个有意思的现象是，虽然「注音符号」的英文叫「Bopomofo Symbols」。但显然，背诵注音符号表的时候，这四个音用的都不是 /o/ 的韵母，而是使用 /ɤ/。「ㄅㄆㄇㄈ」念成 /pɤ/ /pʰɤ/ /mɤ/ /fɤ/。相反，我们在背诵汉语拼音表的时候，倒是真的拼成了 /o/，bo po mo fo /po/ /pʰo/ /mo/ /fo/ 。</p><p>不过突然发现，bo po mo fo 小时候老师教的都是发成闭口呼，也就是 ㄅㄨㄛ buo ㄆㄨㄛ puo ㄇㄨㄛ muo ㄈㄨㄛ fuo。但是无论是查大陆的使用拼音的字典，还是台湾的教育部国语辞典，都不会拼入ㄨ，坚持使用开口呼。而且看一些比较权威的汉语拼音或者注音的教学录音，都是录的开口呼，和学得并不一样。</p><p>查了一下发现，北京音的「波（ㄅㄛ）坡（ㄆㄛ）摸（ㄇㄛ）佛（ㄈㄛ）」一直到新国音还一直开口呼。拼成 bo po mo fo 很好保留了当时的语音。一直到近几十年，才有人开始不区分开口呼和闭口呼，把「菠菜」念成ㄅㄨㄛ ㄘㄞˋ，这不是什么省略 ㄨ (u) 的结果。</p><p>而北京音在晚清到民国早年「多（ㄉㄛ）拖（ㄊㄛ）挪（ㄋㄛ）罗（ㄌㄛ）」虽然也是开口呼，到新国音的时候就已经逐渐转换成闭口呼，也就是 ㄉㄨㄛ ㄊㄨㄛ ㄋㄨㄛ ㄌㄨㄛ，所以汉语拼音也是按 duo tuo nuo luo 拼写。</p><h2 id="e-的奇妙之旅"><a href="#e-的奇妙之旅" class="headerlink" title="e 的奇妙之旅"></a>e 的奇妙之旅</h2><p>另外一个发现就是，汉语拼音里的 e，实际上发的音可太多了，因为注音把所有复合韵母单独设计了符号，所以一下子显得特别明显。整理了一下，至少可以发 /ɤ/ /e/ /ə/ 这三个音，还可能在一些情况下发成 /ɑ/ 或者 /ɐ/ 这种听起来更像 a 的音。在注音符号中，复音韵母使用完全独立的符号，但是在汉语拼音中使用一些单音韵母的符号再进行一些组合，但是复音韵母可能和单音韵母的发音有很大的差异。</p><p>下面给一些例子：</p><p>得 (ㄉㄜˊ, dé) 里的韵母是 /ɤ/</p><p>谁 (ㄕㄟˊ, shéi) 里的韵母是 /ei̯/</p><p>申 (ㄕㄣ, shēn) 里的韵母是 /ən/</p><p>生 (ㄕㄥ, shēng) 里的韵母是 /ɤŋ/</p><p>另外还有个最奇怪的「二」（ㄦˋ, èr），包括我在内的很多人都会念成 /ɐɻ/。我查了下，很多教程上的 IPA 拼音标成了 /ɑɻ/。如果是这么发的话，汉语拼音是不是标成 àr 更好？查了一下，一说是对于是 /ɐɚ/ /ɑɻ/ /ɤɻ/ 还是 /ɚ/ 存在很大争议。20 年代的很多北京话录音中，发得比较接近 /ɚ/ 到 /əɻ/ 中间的感觉，所以这一标记也可能是历史原因产生的。</p><h2 id="尾声"><a href="#尾声" class="headerlink" title="尾声"></a>尾声</h2><p>现代标准汉语是基于北京音设计的，而这里的北京音和现在的北京音还是有很大差异的。要想理解注音符号和汉语拼音的很多特点，确实需要了解那个时空北京下的北京音。我在写这个文章的时候，发现了一个非常有意思的系列视频，最后推荐大家看一看。里面对很多细节的描述也非常清晰，我甚至是看了这个影片后才发现，现代标准汉语里的「你」「娘」「牛」韵母是 /n/ 而不是硬腭化的 /ɲ/ 或者 /ȵ/，给我念错几十年的人生带来了极大的震撼。</p><iframe src="//player.bilibili.com/player.html?aid=62002848&cid=137623039&page=1" scrolling="no" border="0" frameborder="no" framespacing="0" allowfullscreen="true"> </iframe><p><a href="https://www.bilibili.com/video/av62002848/" target="_blank" rel="noopener">影片地址</a></p><p>对于文字不能直接反映读音的语言来说，通常都会引入一个标注发音的方案，从美语的 KK 音标，现代标准汉语的注音、拼音、威妥玛，以及很多方言的像是闽拼、台罗、教罗、上海话钱乃荣方案、耶鲁粤拼、香港教育学院粤拼等一大堆拼音方案。很多方案直接的标注都是互相冲突的，有的时候看到这堆拉丁字母，真的不知道到底要怎么读。但每个方案都有自己设计的时空背景、设计的动机，通过了解这些不同方案设计的背景和动机，可以从不同的角度重新认识语言，让自己对于语音的理解提升更高的层次。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;一些理由&quot;&gt;&lt;a href=&quot;#一些理由&quot; class=&quot;headerlink&quot; title=&quot;一些理由&quot;&gt;&lt;/a&gt;一些理由&lt;/h2&gt;&lt;p&gt;众所周知，我从小接受的用于标记现代标准汉语的系统是「汉语拼音」。两年前，我决定学习一下「注音符号」。注音符号是以章太炎编创的
      
    
    </summary>
    
    
      <category term="语言学" scheme="https://coderemixer.com/tags/%E8%AF%AD%E8%A8%80%E5%AD%A6/"/>
    
      <category term="汉语" scheme="https://coderemixer.com/tags/%E6%B1%89%E8%AF%AD/"/>
    
      <category term="官话" scheme="https://coderemixer.com/tags/%E5%AE%98%E8%AF%9D/"/>
    
  </entry>
  
  <entry>
    <title>大猩猩的乐谱有多少错误？—— 13 Archetypes: Listener 解谜翻船记</title>
    <link href="https://coderemixer.com/2020/01/07/archetypes-listener/"/>
    <id>https://coderemixer.com/2020/01/07/archetypes-listener/</id>
    <published>2020-01-07T05:01:14.000Z</published>
    <updated>2020-01-07T05:06:19.978Z</updated>
    
    <content type="html"><![CDATA[<h2 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h2><p>北京时间 2019 年 1 月 6 日夜间开始了 13 Archetypes 解谜的 Listener 篇。游戏一开始还因为文件名里有 Mfb（某脏话的缩写），导致线索没有如期发布。在一番折腾后，终于看到了这次的谜面，一份乐谱。</p><p><img src="/static/archetypes-listener.png" alt="乐谱"></p><p>这次的解法有多狗血暂且不论，这里就来谈谈这简简单单 9 个小节的乐谱犯了多少个错误，以及这些错误是如何把我带进沟里的。</p><h2 id="拍子怎么数？"><a href="#拍子怎么数？" class="headerlink" title="拍子怎么数？"></a>拍子怎么数？</h2><p>五线谱中，我们会看到音符和音符中间会有纵线相隔，这些纵线叫作「小节线」，两条小节线之间叫作「小节」。通常而言，每个小节的节拍数量是固定的。一般在乐谱的开始，或者要变换节拍的时候在小节的一开始写上一个分数，表示之后小节的节拍，这个分数叫作「拍号」。分母表示小节以几分音符为一拍，而分子表示每小节为一拍。比如流行音乐常见的 $ \frac{4}{4} $ 拍，指的就是以四分音符为一拍，一个小节放 4 个四分音符。</p><p>猩猩的这份谱子是 $\frac{2}{4}$ 拍的，也就是说，以四分音符为一拍，一个小节放 2 个四分音符。就算乐谱的开始和结束的节拍数可以有一定例外，那么聪明的你告诉我，高音部的第 4、6、8 小节，低音部的第 2、5、7、8 小节都是一些什么妖魔鬼怪。</p><p>站在事后诸葛亮的角度，我们知道要把两个部的音符直接合在一起看就能产生一个 20 个字符的序列，但问题是，按照这样的写法，这几个小节谁写在前谁写在后是完全不能判断的，除非完全根据图像上的前后关系来写，这对于乐谱来说完全是莫名其妙的。</p><h2 id="十二平均律与调"><a href="#十二平均律与调" class="headerlink" title="十二平均律与调"></a>十二平均律与调</h2><p>钢琴的调律法称为十二平均律。也就是说从一个 C 到下一个八度里的 C 之间隔了 12 个音。音和音之间的频率的倍率是 $\sqrt[12]{\frac{1}{2}}$。我们熟悉的 do re mi fa sol la si 这 7 个音会以某种形式落在 12 个音上，而这种落上去的方法叫作「调」。猩猩的这份乐谱在一开始没有标记任何升降记号，按自然音阶理解就是所谓的 C 大调或者 a 小调，我们以 C 大调为例（a 小调同理）组成音是 C D E F G A B，do 对应 C。没有出现在这 7 个音里的其它音需要用升降记号标记，比如 C# (Db), D# (Eb) 等。</p><p>这份谱妙就妙在出现了一堆不可能出现的音，比如低音部第六小节的第一颗音，就是不存在的 E#，E# 就是 F，除非是在一些特殊功能下需要特别表示这颗 F 是由一颗 E 变过来时才可能在上面写升号。我一度以为这份谱子的调号标错了，尝试把谱子看成 G 大调上的谱子以合理化它，但是结果表明一丁点关系都没有，因为这份谱子还有一个更严重的问题。</p><h2 id="大熊猫和北极熊"><a href="#大熊猫和北极熊" class="headerlink" title="大熊猫和北极熊"></a>大熊猫和北极熊</h2><p>但比起调号的问题，更严重的问题是大猩猩对于升降记号的理解。如我们刚刚所说，升降记号的存在可以标记出所在调中没有的音，也就是在 7 个音上加标记来表示 12 个音。但似乎在大猩猩的理解中，这个世界的钢琴的一个八度不是 12 个音的，而是 7 个音的。因为在解谜过程中，你需要把 C# 看成 D，把 Db 看成 C 才可以正确求出字符串。如果说你是一个七音音阶的什么古乐器也就算了，大猩猩还大言不惭的在左边特意标出了乐器是 Piano 和 Keyboard，一种现代的黑白键十二平均律乐器。</p><p>也就是说，猩猩家的钢琴，只有白键，没有黑键。我想在猩猩的世界里，下面这个动物叫「大熊猫」吧。</p><p><img src="/static/polar-beer.png" alt="大熊猫？是北极熊啦"></p><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>推理小说十诫中有说：「侦探不应把焦点集中在无关案情的线索，避免误导读者。」</p><p>这其实是作为一种智力博弈游戏的一个重要前提。游戏中错误的乐器、调号让我长时间陷入到对这些极具特殊性的线索的思考中。而且非常让人奇怪的是，解谜涉及了要将某两个字母映射到一个数字的这种后处理方法，而却没有把连接线连接在这些确实需要连接的东西上，谱子上所有的连接线都是单纯误导性的。更不要说还有完全没有意义的红色音符。</p><p>也就是说这个谜题的出题者，在完全不懂乐理、缺乏乐谱的基本常识下，打开了打谱软件随便划拉了一下，就把问题交由全世界的解谜者来解谜。这个谜题的名字叫 Listener，我觉得晚年贝多芬都比出题者更配当一个 Listener。</p><p>如果要解出这个谜题，恐怕要把自己的音乐常识降低到和猩猩一样才能做出来吧。</p><p><strong>救救我们的音乐通识教育吧，别＊＊再糟蹋音乐了。</strong> </p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;简介&quot;&gt;&lt;a href=&quot;#简介&quot; class=&quot;headerlink&quot; title=&quot;简介&quot;&gt;&lt;/a&gt;简介&lt;/h2&gt;&lt;p&gt;北京时间 2019 年 1 月 6 日夜间开始了 13 Archetypes 解谜的 Listener 篇。游戏一开始还因为文件名里有 Mf
      
    
    </summary>
    
    
      <category term="游戏" scheme="https://coderemixer.com/tags/%E6%B8%B8%E6%88%8F/"/>
    
      <category term="设计" scheme="https://coderemixer.com/tags/%E8%AE%BE%E8%AE%A1/"/>
    
      <category term="Ingress" scheme="https://coderemixer.com/tags/Ingress/"/>
    
  </entry>
  
  <entry>
    <title>真的走不动了！魔蓝 MD 千叶新城徒步制霸记</title>
    <link href="https://coderemixer.com/2019/12/08/chiba-new-town-mission-day/"/>
    <id>https://coderemixer.com/2019/12/08/chiba-new-town-mission-day/</id>
    <published>2019-12-08T04:43:16.000Z</published>
    <updated>2019-12-08T05:12:31.762Z</updated>
    
    <content type="html"><![CDATA[<h2 id="点错了"><a href="#点错了" class="headerlink" title="点错了"></a>点错了</h2><p>人来日本一年多，这一次 Ingress 社区活动都没有参加过，那叫一个惨。这不是 12 月要到了，赶紧上去看一看最近有什么 Events？诶，这不是有千叶 IFS 嘛，不错，坐电车过去跳个广播体操，刷一下经验回家，开心。赶紧报名。点完报名，不对，我刚刚是不是点的不是 IFS？再一确认，我报名的竟然是千叶新城 MD？！</p><p>那么竟然报名了，那就规划一下怎么制霸吧。</p><h2 id="规划一下"><a href="#规划一下" class="headerlink" title="规划一下"></a>规划一下</h2><p>思路是这样，所有的任务大体都围绕在三个车站：千叶新城、牧之原、印旛日本医大周围。千叶新城的南面 1、2、6、5、4 围成了一个圈可以回到车站，但是任务 11 和其它任务都连不起来，需要单独往返一次。</p><p>千叶新城车站北面的 3、9、10 在一条路上，而 7 8 在另一条路上，两个都必须往返跑。但是我提前查了下 Google 地图，说是可以从 10 的终点步行到 8 的终点，全程 3.8km。</p><p>牧之原的 4 个任务几乎都要折返，但是距离都很短。但是其中有一个 BIGHOP 商店的任务，早上 10 点前是不会开门的。</p><p>印旛日本医大车站附近有三个任务，其中任务 18 山田桥必须折返，往返 6.4km。我严重怀疑这是因为这个任务的终点是本次 Ingress 的赞助商之一，一家农产品店。</p><p>于是，我的想法很简单，先在千叶中央新城把所有南面任务做了，夜里上山比较危险，直接坐出租车去印旛日本医大，完成全部任务后，往回坐一站到牧之原，做完后再往回坐一站到千叶新城上山把剩下全部任务做完。具体的规划如图：</p><p><img src="/static/chiba-md-plan.png" alt="规划表"></p><p>于是就这么愉快地开始吧。</p><h2 id="夜间注意？"><a href="#夜间注意？" class="headerlink" title="夜间注意？"></a>夜间注意？</h2><p><img src="/static/chiba-new-town-station.jpg" alt="抵达车站图"></p><p>我在 0:30 分抵达了千叶新城，绕成圈圈的 1、2、6、5、4 里就已经有坑了，任务 6 花と緑の文化館的第一个任务在公园里，那个公园没有灯，却有大量的楼梯，幸好提前带了买了手电筒挂在包上，不然肯定要摔。单独不在圈里的任务 11（结缘寺）被标注了「夜间注意」，一路走过去反而全是路灯，并没有让人觉得有什么要注意的。反而是终点寺庙里，一片漆黑之中，有一大片墓地，有一个墓的旁边有一座男童的雕像，雕像还被人披上了红色的雨衣，这个是真的把我吓了一跳。在完成 11 去 4 的过程中，Google 地图找到了一条「近路」，一条 OpenStreetMap 上没有的路。想要节省时间的我，自然是走了这条路。这条路是彻底没有了路灯，而且还有路两侧农田里突然响起来的「这里是私有地，进入违法」之类的警告。不过这 6 个任务也算简单，我在早上 02:35 完成了车站南面全部 6 个任务，比规划提前了 2 个小时。</p><p>然后我就遇到了规划里没有预想到的问题，叫不到车。</p><p><img src="/static/chiba-japan-taxi-no-cars.jpg" alt="Japan Taxi 没有可用车辆"></p><p>这个时间点是没有电车的，而且巴士也不在这种小站停，只能叫车。不但是车站边上那个叫车点叫不到车，网约车也叫不到。我一直等到了 03:12 才有一辆出租车开到了车站的叫车点。司机也是非常有意思，车上贴着东京 2020 奥运会的标识。我和司机说我日文不太好之后，司机开始使用一种日英混合的皮钦语试图和我聊天。仗着我在 SFC 日渐专精的日式英语水平，还真的和司机聊上了。</p><p><img src="/static/chiba-md-taxi-receipt.jpg" alt="出租车发票"></p><h2 id="有点远"><a href="#有点远" class="headerlink" title="有点远"></a>有点远</h2><p>任务 18 往返 6.4km 的山田桥是真的远，而且图中没有路灯，而且途中开始下小雨了。本来规划在中间的 7-Eleven 休息一下吃点东西，结果竟然那是一家非 24 小时运营的 7-Eleven（这地方到底是有多村啊，以后我再也不敢说我们湘南台是乡下了）。任务 17 松虫寺也标注了「夜间注意」，反而这座寺庙竟然有开灯，而且我在寺庙的时候遇到了好几组 Cargress 过来的绿军，对刷了两三波之后下山了。原先打算在「松虫寺」旁边本次 MD 联动的咖啡馆喝个咖啡提提神，谁知，这家店 10 点才开始营业。</p><p><img src="/static/yamada-nauman.jpg" alt="山田桥终点"></p><p>完成这个车站附近全部 3 个任务是 05:55，追上了打车延误的时间，比预先还是提前了 2 小时。这几个任务最难的地方是：这个车站附近没厕所！最近的厕所在车站里！这对于我这个慢性肾炎患者严重不友好。</p><p>由于如果现在按原计划去牧之原的话，BIGHOP 那个任务依然要强迫我到 10 点后才能继续。当时有几个参加者在群里说，牧之原那里好像有不良青年（？）。于是考虑变更计划，坐车直接回千叶新城完成山上的任务。然而这几个任务，可以说是灾难的开始。</p><h2 id="日本豆腐丝"><a href="#日本豆腐丝" class="headerlink" title="日本豆腐丝"></a>日本豆腐丝</h2><p>爬到石尊阿夫利神社上已经要上一个非常长的坡了，这个坡上除了墓地、工厂、农田就是太阳能农场。而从任务 10 的终点到任务 8 的终点之间全部都是宽度不足三个人的泥地。这时候雨越下越大，我还没有带伞。路上的泥地踩下去都会陷下去，我的鞋在这时候已经不知道变成什么颜色了。</p><p><img src="/static/chiba-md-roads.jpg" alt="泥地"></p><p><img src="/static/chiba-solar-farm.jpg" alt="太阳能农场"></p><p>（泥地与太阳能农场）</p><p>在最后穿过一片树林后终于见到了任务 08 的第一个 portal。我在做 8 的时候遇到几个开车上来的绿军，都在问这里能不能 hack 到观音堂的 portal。刚刚 hack 过的我非常清楚，po 的位置标错了，要想 hack 到，要爬下一个大概 40m 的坡在下面的树林里才能 hack 到。这次主办方选 Po 的水平，不得不说，和豆腐丝有得一拼。</p><p><img src="/static/chiba-map.png" alt="地形图"></p><p>回到车站的我，已经走路非常吃力痛苦了，但这时候，我完成了 14 个任务。放弃是没办法放弃了，在吃了早饭买了伞之后，坐车去牧之原，完成最后几个任务。这几个任务除了往返以外已经没有什么大坑了。</p><p><img src="/static/chiba-md-missions.jpg" alt="mission 合影"></p><p>最后在签退会场还见到了会讲中文的一个蓝军，和五个绿军。（要死，这游戏怎么玩？平衡性做得也太差了吧。）</p><p><img src="/static/chiba-md-checkin.jpg" alt="签退会场"></p><p>最后一起在千叶喊出「ラーババン」吧。</p><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>回去坐电车换车中间随便吃了点东西，困得只想赶紧睡觉。这次 MD 低保完成的难度应该说是极低的。如果当天没有下雨，按 1-2-6-5-4-3 的顺序完成，不但从车站出发，还直接送你到签到会场结束。但是对于制霸玩家，完全是噩梦。截至写稿，我的腿还是走起来一瘸一拐的状态。</p><p><img src="/static/chiba-md-googlefit.jpg" alt="Google Fit 统计"></p><p>全程 44 公里可能对于平时有常徒步 Ingress 的玩家来说不算一件太困难的事。但是大冬天在雨中从泥地里反复的上坡下坡，确实是把人折腾得够要命。我到家倒头就睡，醒来已经是中午了。</p><p><img src="/static/chiba-ingress-cards.jpg" alt="交换卡片"></p><p>结论就是，下次 MD 前把日本的驾照给考了吧。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;点错了&quot;&gt;&lt;a href=&quot;#点错了&quot; class=&quot;headerlink&quot; title=&quot;点错了&quot;&gt;&lt;/a&gt;点错了&lt;/h2&gt;&lt;p&gt;人来日本一年多，这一次 Ingress 社区活动都没有参加过，那叫一个惨。这不是 12 月要到了，赶紧上去看一看最近有什么 Even
      
    
    </summary>
    
    
      <category term="Ingress" scheme="https://coderemixer.com/tags/Ingress/"/>
    
      <category term="Mission Day" scheme="https://coderemixer.com/tags/Mission-Day/"/>
    
  </entry>
  
  <entry>
    <title>量子算命，在线掷筊 —— IBM 量子云计算机使用入门</title>
    <link href="https://coderemixer.com/2019/11/13/quantum-poe/"/>
    <id>https://coderemixer.com/2019/11/13/quantum-poe/</id>
    <published>2019-11-12T17:54:20.000Z</published>
    <updated>2019-11-12T18:06:01.416Z</updated>
    
    <content type="html"><![CDATA[<h2 id="背景"><a href="#背景" class="headerlink" title="背景"></a>背景</h2><p>自古以来算命离不开随机现象。古代人使用龟壳的裂纹来进行占卜，但出于动物保护主义，现代社会使用裂纹之类的自然混沌来预测变得不人道。现代算命会使用洗牌等手段产生随机数，但这样的随机很多时候可以得到人为控制，无法真正体现神明的意思。</p><p>作者在此提出一个方法，利用量子力学现象进行随机数的发生。我们对于一个量子位（qubit），使其通过一个阿达马门（Hadamard gate）。这个门可以将 $$|0\rangle $$ 转换成 $$\frac{ |0\rangle + |1\rangle } {\sqrt{2}} $$，即进行状态叠加。当我们此时测量这一量子的状态，那么其波函数会发生突变，变为其中一个本征态。且在我们所设计的量子电路中，观察到 0 和 1 的概率应该都是 50%。如果我们今天对量子力学的认识是正确的，那么随机性应该是量子物理的内禀性质，所以我们在邀请真正的上帝来为我们掷骰子，能真正表达量子神明的意愿。</p><h2 id="实现"><a href="#实现" class="headerlink" title="实现"></a>实现</h2><p>我们采用 IBM 的量子云计算机 IBM Q 进行实现。IBM 提供了丰富好用的量子程序开发的 SDK，并且可以在设计调试完成后，交给线上真正的云量子计算机进行运算，让你足不出户，不需要亲自前往土地庙，也可以听到神明的解答。</p><p>我们以「掷筊」为例，</p><blockquote><p><a href="https://zh.wikipedia.org/zh-hans/%E6%93%B2%E7%AD%8A" target="_blank" rel="noopener">掷筊</a>是一种道教与民间信仰中问卜的仪式；又称掷筶、掷杯、博杯，普遍流传于华人民间传统社会。「筊杯」是一种占卜工具，是世俗之人所用以与神明指示的工具。</p></blockquote><p>我们同时观测两个处于叠加态的量子。若它们都是 0，那么就是「阴筊」；如果都是 1，那么就是「笑筊」；如果两个状态相反，那么则是「圣筊」。具体的量子电路如下：</p><p><img src="/static/poe-circuit.png" alt="Poe Circuit"></p><p>使用 Qiskit 实现起来非常便利：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># Setup Dependencies</span></span><br><span class="line"><span class="keyword">from</span> qiskit <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line"><span class="comment"># Setup Poe Dictionaty</span></span><br><span class="line">POES = [<span class="string">'陰筊'</span>, <span class="string">'聖筊'</span>, <span class="string">'聖筊'</span>, <span class="string">'笑筊'</span>]</span><br><span class="line"></span><br><span class="line"><span class="comment"># Setup Quantum Circuit</span></span><br><span class="line">circ = QuantumCircuit(<span class="number">2</span>)</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">2</span>):</span><br><span class="line">    circ.h(i)</span><br><span class="line">circ.measure_all()</span><br><span class="line"></span><br><span class="line"><span class="comment"># Use Simulator for Testing</span></span><br><span class="line">backend = Aer.get_backend(<span class="string">'qasm_simulator'</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># Execute the Result</span></span><br><span class="line">job = execute(circ, backend, shots=<span class="number">1</span>)</span><br><span class="line">result = job.result().get_counts(circ)</span><br><span class="line"></span><br><span class="line"><span class="comment"># Convert results</span></span><br><span class="line">converted = int(list(result.keys())[<span class="number">0</span>], <span class="number">2</span>)</span><br><span class="line">print(POES[converted])</span><br></pre></td></tr></table></figure><p>我们只需要每进行一次这个量子电路的执行，就可以得到一次上天的掷筊结果。在模拟器测试成功后，我们就可以将后端换成真正的 IBM 云量子计算机进行掷筊。（完整样例程序<a href="https://github.com/dsh0416/quantum-i-ching/blob/master/poe.ipynb" target="_blank" rel="noopener">参考这里</a>）</p><h2 id="未来工作"><a href="#未来工作" class="headerlink" title="未来工作"></a>未来工作</h2><p>我们使用了这一技术更有效的让神明为我们解答问题，对于人类社会具有重大意义。再也不需要等妈祖来托梦，人类可以主动去探寻神明的秘密。但是这一方案目前仍存在不足。</p><p>例如如果我们基于易经进行六爻占卜（<a href="https://github.com/dsh0416/quantum-i-ching/blob/master/notebook.ipynb" target="_blank" rel="noopener">程序</a>），一共需要 64 个经典态，即需要 6 个量子。但 6 个量子的量子芯片目前仍十分稀有。但由于我们的占卜过程不需要产生任何纠缠态，只需要 H 门这一种量子门，在此我们提出可以针对这一市场需求设计并行的单量子芯片，从而让量子计算走入千家万户。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;背景&quot;&gt;&lt;a href=&quot;#背景&quot; class=&quot;headerlink&quot; title=&quot;背景&quot;&gt;&lt;/a&gt;背景&lt;/h2&gt;&lt;p&gt;自古以来算命离不开随机现象。古代人使用龟壳的裂纹来进行占卜，但出于动物保护主义，现代社会使用裂纹之类的自然混沌来预测变得不人道。现代算命会使
      
    
    </summary>
    
    
      <category term="量子计算" scheme="https://coderemixer.com/tags/%E9%87%8F%E5%AD%90%E8%AE%A1%E7%AE%97/"/>
    
  </entry>
  
  <entry>
    <title>日本語字形「关」字攷</title>
    <link href="https://coderemixer.com/2019/08/15/japansese-kanji-5173-research/"/>
    <id>https://coderemixer.com/2019/08/15/japansese-kanji-5173-research/</id>
    <published>2019-08-15T10:22:16.000Z</published>
    <updated>2019-08-15T10:58:48.636Z</updated>
    
    <content type="html"><![CDATA[<p>我的手機使用的是英文系統，Android 在漢字 fallback 的時候會優先 fallback 到日文字形上，這使得一些簡體漢字的顯示非常奇怪。其中一個特別突出的就是「关」<code>U+5173</code> 字。「关」在我的理解中一般作「関」<code>U+95A2</code>、「關」<code>U+95DC</code> 或「闗」<code>U+95D7</code> 的簡化字。但是在日文字形中，<code>U+5173</code> 是一個只有一半字寬的奇怪字形，甚至不符合一般漢字的原理、放在文章裏非常奇怪。</p><p><img src="/static/kanjidic-5173.png" alt="kanjidic-5173"></p><p>Weblio 上的 KANJIDIC2 漢字辭典說這是「日本語ではあまり使用されない漢字です。」這顯然不能解答我們的問題。</p><h2 id="字源探究"><a href="#字源探究" class="headerlink" title="字源探究"></a>字源探究</h2><p>正在我一籌莫展的時候，日本的漢字字源網站 <a href="http://jigen.net" target="_blank" rel="noopener">jigen.net</a> 提供了靈感。這個字源字典收錄了<a href="https://jigen.net/kanji/20851" target="_blank" rel="noopener">「关」</a>字，給出的解釋非常有意思「笑の初文」，也就是說「笑」字最早的寫法，但是網站沒有給出任何參攷資料。如果是這樣的話，我們顯然能在漢語的字源資料中找到相應的蛛絲馬跡。</p><p><img src="/static/jigen-5173.png" alt="jigen-5173"></p><p>說起「笑」的異體字，我們第一反應，可能是「咲」字。於是我們以此入手，可以在《康熙字典》中找到：「《集韻》笑古作咲。註詳竹部四畫。或省作𠇄 <code>U+201C4</code>。」這個字今天還是日語的常用字。</p><p>於是我直接去找了《集韻》（四庫全書本）的影印資料，內容比《康熙字典》裏的要詳細很多：</p><p><img src="/static/jiyun-5173.png" alt="jiyun-5173"></p><blockquote><p>笑咲关仙妙切喜也古作笑或省俗作㗛非是文十一</p></blockquote><p>從這裏我們確認，「关」確實在歷史上可以作爲「笑」的意思。</p><p>但是把「关」稱爲「笑」的初文的證據卻不好找。1999 年復旦大學中文系張虹倩、劉斐在《中國文字研究》雜誌上發表了一篇論文。認爲：</p><blockquote><p>“笑”字字形流变中”从艸从犬”早于”从竹从犬”,”从竹从犬”又早于”从竹从夭”。然而”从艸从犬”也非”笑”的最早字形,”艸”是”八”的篆形讹变。</p></blockquote><p>這篇文章的立論建立在《說文》中對於「笑」字的原始記載已經遺失。但是這一說法和之後的出土文物不符。隨着更早的楚系簡牘和帛書的<a href="https://www.zdic.net/zd/zx/cx/%E5%92%B2" target="_blank" rel="noopener">出土</a>，我們可以看到在《說文》以前，「笑」字是「从艸从犬」的𦬦 <code>U+26B25</code> 字，「关」作「笑」字初文並沒有有效的證據。</p><p><img src="/static/jiandu-5173.png" alt="jiandu-5173"></p><p>除了這一解釋，還有一個解釋，認爲「关」是「芖」讹變而來。「芖」在 1920 年代出土東漢《熹平石经》周易殘碑顯示是「笑」的省文。而「咲」是「关」加上「口」字旁的俗字。這一說法在邏輯上講得通，而且也可以解釋爲什麼日本語的「关」字形使用了一半的字寬，因爲把這個字視作「咲」的一部分。但這一說法沒有實際的證據證實，所以也只能作爲一個推測來看。</p><h2 id="總結"><a href="#總結" class="headerlink" title="總結"></a>總結</h2><p>其實深入研究到後半段就發現，無論原因是什麼，日文字形裏的「关」和簡化字的「关」完全就是兩個字。</p><p>根本不知道爲什麼 Unicode 分配到了同一個編碼上。</p><p>雖然 Unicode 的實作很髒，但是它確實構成了我們每天生活的必需。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;我的手機使用的是英文系統，Android 在漢字 fallback 的時候會優先 fallback 到日文字形上，這使得一些簡體漢字的顯示非常奇怪。其中一個特別突出的就是「关」&lt;code&gt;U+5173&lt;/code&gt; 字。「关」在我的理解中一般作「関」&lt;code&gt;U+95A2
      
    
    </summary>
    
    
      <category term="语言学" scheme="https://coderemixer.com/tags/%E8%AF%AD%E8%A8%80%E5%AD%A6/"/>
    
      <category term="日语" scheme="https://coderemixer.com/tags/%E6%97%A5%E8%AF%AD/"/>
    
  </entry>
  
  <entry>
    <title>休闲魔蓝玩家的湘南单人四重蓝笋</title>
    <link href="https://coderemixer.com/2019/08/12/ingress-resistance-shonan-homogeneous-field/"/>
    <id>https://coderemixer.com/2019/08/12/ingress-resistance-shonan-homogeneous-field/</id>
    <published>2019-08-12T12:29:28.000Z</published>
    <updated>2019-08-12T13:10:00.693Z</updated>
    
    <content type="html"><![CDATA[<p>作为一个蓝笋教徒，上一次也是唯一一次做蓝笋就是 <span style="color: rgb(0, 112, 192);">@ngiamzsjit</span> 设计的复旦单人完全四重任务。</p><p>那个任务我做了两次，第一次做到一半，被突然出现的绿军炸了。而且那个绿军确实是无心的，一边上课一边随手甩了两个炸。由于那个炸同时涉及一类点和二类点。让修复工作变得异常困难，最后随便连了一通就回家了。</p><p>第二次是在夜里做的，当时复旦内部正在施工，有好几个 po 非常难摸，但是做到凌晨还是顺利完工，只不过出校门的时候被复旦的保安问了半天。</p><p><img src="/static/ingress-homo-badge.png" alt="ingress-homo-badge"></p><p>然后我就咸鱼了一年。本来以为到了日本 portal 密度变高应该可以多玩玩，结果一年下来连家门口 50 米远的 IFS 都没去。于是就考虑在暑假趁着做个单人四重竹笋把学校盖了。</p><h2 id="规划"><a href="#规划" class="headerlink" title="规划"></a>规划</h2><p>我大概一个月前开始规划。我们庆应大学湘南藤泽校区在山上，又是休校时间，上山的唯一公共交通工具是公交车，最近的车站分别是 30 分钟车程的湘南台站和辻堂站。这意味着行动一旦开始，绿军就算要来阻挡，至少也需要大概半个小时的机动时间。</p><p>校区很小，校区内大约有 20 个左右的 portal，密度很高，理论上应该会好做，但是实际情况形状不够好，在这些 portal 中找不到可能的四重解。最后考虑引入大学在坡下入口处的纪念碑和学校后门几个神社，最后找到了一组解。</p><p><img src="/static/ingress-homo-plan.png" alt="ingress-homo-plan"></p><p>我一开始使用的是 <span style="color: rgb(0, 112, 192);">@NanoApe</span> 开发的 <a href="https://github.com/Konano/Ingress-Field-Design/" target="_blank" rel="noopener">Konano/Ingress-Field-Design</a> 工具进行规划在。运行过程中发现两个问题，一个是这个项目一开始设计给 Windows 执行的，程序完全由 GB2312 编码编写和编译。实际运行后发现由于我的 portal 名中有日语字符，直接 crash 了整个程序。最后我把编码都换成了 UTF-8 重新编译，输出了四重规划。</p><p>然后是输出单人四重的路径，<a href="https://github.com/Konano/Ingress-Field-Design/" target="_blank" rel="noopener">Konano/Ingress-Field-Design</a> 希望用户手动上传一个经过所有 portal 的路径。而我嫌麻烦，用 Mathematica 随手写了个脚本随手写了个枚举所有点 Dijkstra 找最短路的程序，算法时间复杂度是 O(N^2)。结果就被自己写的程序坑了，因为选定的好几组 portal 在两个坡上，这使得我之后行动时不停上坡下坡。</p><h2 id="行动开始"><a href="#行动开始" class="headerlink" title="行动开始"></a>行动开始</h2><p>在行动开始前有个好消息就是学校的整个区域被一条从农舍间的 portal 射出来的多个蓝色 field 盖场。这使得学校内 portal 在行动开始前完全是没有 link 的状态，这是完美的行动条件。</p><p>但不如人意的是我从 7 号开始感冒发烧，于是行动一直被推迟 <del>（反正画过就是做过）</del>。一直到 10 号 JST 6:00 在双倍经验结束前几个小时，我实在睡不着，想出去散步清醒一下，于是当即决定开始行动。</p><p>首先我坐巴士上到山一半的远藤。在一片杂草中见到那个用来盖场的 portal，插八然后毒，接下来徒步上山。</p><p><img src="/static/ingress-grass.png" alt="ingress-grass"></p><h2 id="插曲-1"><a href="#插曲-1" class="headerlink" title="插曲 1"></a>插曲 1</h2><p>然而行动刚刚开始一小时，我刚把第一个支点的 key 摸全，开始连线就被绿军 <span style="color: rgb(0, 176, 80);">@sicksQ </span> 打了。</p><p><img src="/static/ingress-comm-1.png" alt="ingress-comm-1"></p><p>这直接把我原来的计划打乱。于是我和 Intel 组正在帮我截图的 <span style="color: rgb(0, 112, 192);">@DarkKowalski</span> 开始用工地日语向对方询问。</p><p><img src="/static/ingress-comm-2.png" alt="ingress-comm-2"></p><p>对方随后表示接受，并且让我当心中暑，行动得以继续。但是 key 缺了几把，于是又不得不回去重新摸。根据攻击的范围判断，对方可能就是住在学校附近的住民，万万没想到千算万算在这里失算了。</p><p><img src="/static/ingress-comm-3.png" alt="ingress-comm-3"></p><p>一直到大约 9 点，问题 portal 基本修复完毕。而我因为这个感冒头昏脑胀，学校因为休校，关闭了自动贩卖机，我差点脱水。趁着修复的过程下山买了几瓶运动饮料灌下去又坐了一会，可以继续行动。</p><h2 id="插曲-2"><a href="#插曲-2" class="headerlink" title="插曲 2"></a>插曲 2</h2><p>行动进行到大约 9:30 发现 Ingress Prime 有一个很麻烦的 bug。在 link 完成后，默认提示的下一个 link portal，经常图片没有刷新但是文字没有刷新。这使得我不小心连接错了一个 portal，还好是四类点影响不大，毒了重新摸，再重新连。</p><p>但是当我到最后一个 portal 的时候发现自己忘记带 SoftBank Ultra Link 了。一共要往外射 9 条 link。而我当时已经把支点连接完毕了。</p><p>当时 Intel 组的 <span style="color: rgb(0, 112, 192);">@DarkKowalski</span> 当即表示他有一个 pack 没有兑换，里面有 SoftBank Ultra Link 可以合法空投。这个 pack 放在 <span style="color: rgb(0, 112, 192);">@alexanderjunyin</span> 那里。在连续电话、微信电话、Telegram 电话各两通后，我确认，这人 <strong>睡着 </strong> 了。</p><p><img src="/static/telegram-sleep.png" alt="telegram-sleep"></p><p>于是不得不毒了打掉。从坡下的另一个支点连过来。毒的过程中 8 个 key 只掉了 2 把，库存里还有 2 把，又绕学校一圈重新摸了 4 把。</p><p>最终终于完成了完全四重。</p><p><img src="https://imgur.com/OyAIiox.gif" alt=""></p><p><img src="/static/ingress-homo-result.png" alt="ingress-homo-result"></p><h2 id="感想"><a href="#感想" class="headerlink" title="感想"></a>感想</h2><p>虽然最后没有在双倍经验结束前做完，但还是坚持做完了这个非常酷的完全四重。不过我下次再也不想在生病的时候去做这种大任务了，感觉真的要死。另外那位放我一马的重生绿军大佬 <span style="color: rgb(0, 176, 80);"> @sicksQ </span> 觉得这个 CF 很好看，一直到晚上都没有来打。</p><p>这里不愧是乡下，做了一个完全四重 COMM 里完全寂静，而且也没有人约饭。最后只好去便利店买了两个三明治，再去药店买了一盒感冒药回家了。</p><p>不过下个月就要回国，原本考虑做超级大坑清明上河图，但似乎里面有好几个任务没有办法摸到。于是考虑一下是不是有可能去做个单人五重。之前虽然做过 <span style="color: rgb(0, 112, 192);">@ngiamzsjit</span> 的教程，但是觉得对于多重的理解并不是很深刻，在这次自己把自己差点坑死后，感觉自己对完全多重的理解进步很大。</p><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>地面组：<span style="color: rgb(0, 112, 192);">@DELTOND</span></p><p>清障组：<span style="color: rgb(0, 112, 192);">@DELTOND</span></p><p>提供 Key：<span style="color: rgb(0, 112, 192);">@DELTOND</span></p><p>规划程序协力：<span style="color: rgb(0, 112, 192);">@NanoApe</span></p><p>Intel &amp; 截图：<span style="color: rgb(0, 112, 192);">@DarkKowalski</span></p><p>感谢绿军：<span style="color: rgb(0, 176, 80);">@sicksQ </span></p><p>睡觉组：<span style="color: rgb(0, 112, 192);">@alexanderjunyin</span></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;作为一个蓝笋教徒，上一次也是唯一一次做蓝笋就是 &lt;span style=&quot;color: rgb(0, 112, 192);&quot;&gt;@ngiamzsjit&lt;/span&gt; 设计的复旦单人完全四重任务。&lt;/p&gt;
&lt;p&gt;那个任务我做了两次，第一次做到一半，被突然出现的绿军炸了。而且那个
      
    
    </summary>
    
    
      <category term="Ingress" scheme="https://coderemixer.com/tags/Ingress/"/>
    
      <category term="完全四重" scheme="https://coderemixer.com/tags/%E5%AE%8C%E5%85%A8%E5%9B%9B%E9%87%8D/"/>
    
  </entry>
  
  <entry>
    <title>晦涩难懂的码农段子（连载中）</title>
    <link href="https://coderemixer.com/2019/05/06/programming-jokes-that-hard-to-be-understood/"/>
    <id>https://coderemixer.com/2019/05/06/programming-jokes-that-hard-to-be-understood/</id>
    <published>2019-05-06T13:34:36.000Z</published>
    <updated>2019-05-06T14:53:08.120Z</updated>
    
    <content type="html"><![CDATA[<h2 id="序"><a href="#序" class="headerlink" title="序"></a>序</h2><p>《晦涩难懂的码农段子》是我从今年三月的一天突发奇想开始写的一些零散的段子集。通常是首发在微博上，并且添加 <code>#晦涩难懂的码农段子</code> 作为 Tag。然后如果字数允许，转发到 Twitter 上。这个系列的段子，是不是真的晦涩难懂，其实不尽然；那有是不是只和码农有关，其实有些也只是擦边球。这个系列的最初想法是我在读了很多喜剧作品，特别是很多 Stand-up Comedy 后，进行的一些分析，试图理解喜剧所需要的剧情冲突究竟如何体现。所谓冲突，即在一个自洽的舞台说明下，发展出矛盾。把这一舞台设定在程序员的世界中，实际上本质是设置在我所熟悉的当下社会里。而有时候，笑话本身也可以产生一种讽刺。而这个则是利用喜剧将观众引入更令人思考的方向了。</p><p>由于微博帐号莫名其妙被封号，我决定在这篇文章里，将发过的内容整理修正一下，如有遗漏，请多多谅解。</p><p>这个系列的段子就目前来看，主要有几个常见的类型。</p><p>一个最常见的是通过一系列比较，先让观众在大脑中建立某一领域的思维定式，再在最后一句话中打破它。这一类型是启发自 Stand-up Comedy 里一种前半段很正经地讲新闻，然后突然改用戏虐的口气调侃事件，从而产生一个巨大的反差感。在写的过程中，逐渐固定了一些人物的形象，比如说，如果需要有人风评被害，那么优先是小李；如果梗有二次发展，那么还可以有老李。</p><p>一个是老梗新说，很多时候其实是一些大家已经见过的老梗，而这里的关键就是如何在老梗上做进一步地发展。比如为老梗增加铺垫，或者突然改变老梗的结局或者背景。写这一些段子的时候，我的主要想法是，写一些比较长的段子的时候，需要利用到类似的通过铺垫渐进，中间又不能让笑点断开太久。而利用已知去制造冲突，利用梗制造梗，则是一个非常有趣的选择。</p><p>最后则是一些一句话段子。虽然字数短，但是信息量不会少。句子中还需要通过被故意颠倒的语法或者添加一些无意义的虚词，来使得观众需要在听完句子后进行一些思考，再对笑话做出反应。这一类则是利用人思考本身的特征来创造喜剧冲突。</p><p>说实话，「晦涩难懂」四个字，其实一开始，只是为我的笑话难笑而找的借口。就像虽然我喜欢看「純靠北工程師」，但是被卖掉，天天发废文的「靠北工程師」似乎更受到大众的欢迎。如果做大是工程师讲段子给大家听，那么我希望能够把段子将给工程师听。而这就是这个系列存在的核心想法。</p><h2 id="段子一览（从新到旧）"><a href="#段子一览（从新到旧）" class="headerlink" title="段子一览（从新到旧）"></a>段子一览（从新到旧）</h2><p><strong>2019-05-03</strong></p><p>你怎么写出这种烂代码的？你是没学过设计模式吗？<br>（一个月后）<br>幹！你怎么在一份 codebase 里同时写十几种设计模式的？</p><p>结论：一个月前这人在写 Vanilla JS，一个月后改写 React 了。</p><p><strong>2019-05-02</strong></p><p>小王是一名 C++ 工程师，他其实只会写 C，但用 C++ 编译器编译。<br>小张是一名 C++ 工程师，他会往 C 语言里加一些 class 和 template 关键字。<br>小李是一名 C++ 工程师，他熟读标准，精通标准库，他的代码大量使用了 C++ 近 10 年来引入的新特性。</p><p>老李写的是谭++。</p><p><strong>2019-05-01</strong></p><p>小王喜欢用 null 表示空，词源是拉丁语 nūllus (not any)。<br>小张觉得直接用拉丁语 nil 更好，更短也表达了 nothing 的意思。<br>小周觉得用英语 None 不更便于理解？<br>小李觉得他们都有道理，于是同时引入了 nil null None 和 Nothing。</p><p>老李觉得，应该再引入一个 NSNull。</p><p><strong>2019-04-26</strong></p><p>现有的尝试去除 GC 又希望内存安全的语言，trade-off 其实都挺大的。我觉得每个拿 Rust 实现过大型项目的人，都对它爱恨交织。虽然现在 GC 技术已经发展得如此先进，但是大家还是迫切地想去除它，我觉得主要原因是编译器作者很难和人解释清楚自己在某 top 公司做垃圾回收的工作。</p><p><strong>2019-04-26</strong></p><p>A: 刚有新闻说澳大利亚的垃圾回收系统崩溃了？</p><p>B: 啊，什么虚拟机出 bug 了？</p><p><strong>2019-04-24</strong></p><p>我的西班牙语知识主要来自于 macOS 的 codename。</p><p><strong>2019-04-24</strong></p><p>结论：谦谦从 B 站离职去了日本，<br>B 站和日本的平均英语水平都下降了。</p><p><strong>2019-04-15</strong></p><p>表面：我是全栈工程师。<br>其实：我能写点 JavaScript。</p><p>表面：我写过 Ruby。<br>其实：我用 Rails 脚手架生成好代码后，往里面随便填点东西。</p><p>表面：我会用 Git。<br>其实：我有个 GitHub 账号。 </p><p>表面：我关心开源社区发展。<br>其实：我常看○○峰博客。</p><p><strong>2019-04-10</strong></p><p>在日本，<br>租房需要手机号和银行卡；<br>办手机需要住址和银行卡；<br>而银行需要手机号和住址。</p><p>结论，引用计数法需要引入弱指针才能避免循环引用导致的内存泄漏。</p><p><strong>2019-04-07</strong></p><p>小王的高中数学成绩很好，他大学报考了数学系，挂科了无数门，毕业后他决定放弃数学转业成为了一名优秀的软件工程师。</p><p>小张听说 21 世纪是生命科学的世纪，他大学报考了生物系，延毕了两年，毕业后他决定放弃生物转业成为了一名优秀的软件工程师。</p><p>小李很喜欢打电子游戏，他大学报考了计算机科学，天天在宿舍玩游戏，毕业后没找到工作，回老家搬砖去了。</p><p><strong>2019-04-07</strong></p><p>小王是前端工程师，能熟练处理 IE6 的 3px 漂移和 margin 会突然翻倍的 bug。<br>小张是前端工程师，熟读了 ES6 标准，使用 webpack 来打包他的前端项目。<br>小明是前端工程师，拿框架脚手架生成代码后，依葫芦画瓢也能写出一个前端项目。</p><p>小李培训班毕业后，难以独立完成项目。但是他读了一些文章后，认为自己写的语言和 Haskell 是近亲，他是优雅的函数式程序员，天天上网和人约架。</p><p><strong>2019-04-06</strong></p><p>调校模型 ✅️<br>调教模型 ❎️</p><p>调教的话，不感觉有点色情吗…<br>仿生人会和电子羊玩 SM 吗？</p><p><strong>2019-04-05</strong></p><p>小王精通数理逻辑，他是一名大数据工程师。<br>小张熟悉线性代数，他是一名大数据工程师。<br>小明会用神经网络框架，他是一名大数据工程师。</p><p>小李会用 Excel，有两块 4TB 硬盘，他声称自己是大数据工程师。小李拿到了融资，雇小王小张小明实现。「这公司第一行代码是我写的」小李说。</p><p><strong>2019-03-28</strong></p><p>我幼儿园的时候只会写一些垃圾 BASIC，一直到小学五年级才算好好掌握了一下 VB。感觉学得太晚，而且太不系统。我如果当时学的是 Lisp，</p><p>恐怕现在穿女装会更可爱一点吧。</p><p><strong>2019-03-28</strong></p><p>声明式编程：大杯豆奶三份抹茶粉三泵糖。</p><p>命令式编程：大杯抹茶拿铁去牛奶换豆奶，多加两 shot 抹茶粉去一半糖。</p><p>虽然命令式点单很麻烦，但仔细一想，如果星巴克采用声明式点单的话，水不收钱，美式就不能卖得比浓缩贵了。</p><p><strong>2019-03-27</strong></p><p>小王写代码前会仔细思考，如果一个方法会被复用或对性能有很大影响，他会提前设计好架构，然后简洁优雅地实现出来。</p><p>小张会事后思考，擅长分析性能瓶颈，根据工程规模进行重构，代码仓库保持得很干净。</p><p>小李想到哪里写到哪里。</p><p>但因为 git commit 数量比较多，小李被升职了。</p><p><strong>2019-03-27</strong></p><p>小王是一个大型项目下的 C++ 工程师，今天他上班 trigger 了一个全量编译便回家了，明天再来。</p><p>小张是一个深度神经网络的 Python 工程师，今天他上班改了一个参数开始训练便回家了，三天后再来。</p><p>小李是一名资深的 Rust 工程师，今天他上班只花了一小时就完成了需求的开发。</p><p>然后连续加班了三个晚上才使得编译通过。</p><p><strong>2019-03-27</strong></p><p>小王是星星大户，他在简历写上自己的 GitHub ID 希望公司知道他是个开源狂热者。</p><p>小张以前公司仓库在 GitHub 上，他写上自己的 GitHub ID 希望公司看到自己勤奋的贡献表。</p><p>小李不想成为程序员，但他家人逼他。他在简历上下自己全白的 GitHub 账号好让面试官尽早淘汰他。</p><p><strong>2019-03-27</strong></p><p>小王是一个大型项目下的 C++ 工程师，今天他上班 trigger 了一个全量编译便回家了，明天再来。</p><p>小张是一个深度神经网络的 Python 工程师，今天他上班改了一个参数看是训练便回家了，三天后再来。</p><p>小李是一名资深的 Rust 工程师，今天他上班只花了一小时就完成了需求的开发。</p><p>然后连续加班了三个晚上才使得编译通过。</p><p><strong>2019-03-26</strong></p><p>今天晚上小王在度假很快乐，想打开手机看看朋友圈。结果小王刚打开微信就看到，产品经理在找他修 bug，小王马上把微信关起来。</p><p>「假的！」<br>「哎呀，我的眼睛业障重啊。」</p><p>请问那个 bug 是真的还是假的？暂时的。但是如果你当真的，那你就会很生气很急，想赶紧去看日志，最后发现基本上都是鸡毛蒜皮的问题。你不修也有别人修，说不定重启重启自己就好了，大不了老板和客户糊弄两下就过去了。</p><p><strong>2019-03-26</strong></p><p>小王学习了 Rust 语言，<br>小王不敢用 nightly 上生产，<br>但人人都拿 nightly 上生产，<br>而且总有需要的特性在 nightly 里。</p><p>最后小王悟到了「nightly 不异 stable，stable 不异 nightly；nightly 即是 stable，stable 即是 nightly」的道理。</p><p><strong>2019-03-25</strong></p><p>小王自从学习了 Swift 和 Kotlin 语言后，<br>性格变得多疑和激动了很多。</p><p><strong>2019-03-25</strong></p><p>小王的自我学习能力很强。最近，他在工作之余，又学习了单片机知识。看完教材，他感触很深，决定给自己做的项目添加跑马灯和利用蜂鸣器放音乐的功能。</p><p><strong>2019-03-24</strong></p><p>曲艺界有句行话说：「一天不练，自己知道；两天不练，同行知道；三天不练，观众知道。」其实这句话放在二十一世纪的程序行业也是非常受用的。</p><p>一天不写代码，<br>打开你的 GitHub Profile 全知道了。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;序&quot;&gt;&lt;a href=&quot;#序&quot; class=&quot;headerlink&quot; title=&quot;序&quot;&gt;&lt;/a&gt;序&lt;/h2&gt;&lt;p&gt;《晦涩难懂的码农段子》是我从今年三月的一天突发奇想开始写的一些零散的段子集。通常是首发在微博上，并且添加 &lt;code&gt;#晦涩难懂的码农段子&lt;/cod
      
    
    </summary>
    
    
      <category term="编程" scheme="https://coderemixer.com/tags/%E7%BC%96%E7%A8%8B/"/>
    
      <category term="笑话" scheme="https://coderemixer.com/tags/%E7%AC%91%E8%AF%9D/"/>
    
      <category term="段子" scheme="https://coderemixer.com/tags/%E6%AE%B5%E5%AD%90/"/>
    
  </entry>
  
  <entry>
    <title>微信红包背后的赌博游戏</title>
    <link href="https://coderemixer.com/2019/03/26/wechat-red-envelope-analyze/"/>
    <id>https://coderemixer.com/2019/03/26/wechat-red-envelope-analyze/</id>
    <published>2019-03-26T14:15:09.000Z</published>
    <updated>2019-03-26T15:20:09.172Z</updated>
    
    <content type="html"><![CDATA[<h2 id="序"><a href="#序" class="headerlink" title="序"></a>序</h2><p>今天坐车的时候，看到司机的微信在玩一个叫「红包接龙」的游戏，让我提起了兴趣。游戏的规则很简单：群里有 100 个人，首先群主发一个 100 元的红包，然后大家去抢。抢到最多钱的那个人（手气最佳）必须再发一个 100 元的红包，依次类推。乍一听，如果每个人都遵守规矩，那么这就是一个零和游戏。但仔细品品感觉并不那么简单。在这个情况下，是不是资产很容易两极分化，然后其中一些人破产呢？又或者，存不存在一种玩法，使得可以必胜呢？于是我想来好好讨论一下这个问题。</p><h2 id="随机算法"><a href="#随机算法" class="headerlink" title="随机算法"></a>随机算法</h2><p>要想探讨这个游戏，首先我们需要知道微信红包是怎么进行随机算法的。根据这个<a href="https://www.zhihu.com/question/22625187/answer/85530416" target="_blank" rel="noopener">知乎回答</a>，答主给出了一个微信红包的算法。由于具体的算法是一个黑盒，那么我们就先建立在这个算法下进行好了，也就是：</p><blockquote><p>每个人随机从 0.01 和剩余平均值两倍之间取一个值，最后一个人拿走剩余全部。</p></blockquote><p>我写了一个小 Ruby 脚本来实现这个功能：</p><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">require</span> <span class="string">'descriptive_statistics'</span></span><br><span class="line"><span class="keyword">require</span> <span class="string">'securerandom'</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">RedEnvelope</span></span></span><br><span class="line">  <span class="function"><span class="keyword">def</span> <span class="title">initialize</span><span class="params">(money, size)</span></span></span><br><span class="line">    @size = size</span><br><span class="line">    @money = money</span><br><span class="line">  <span class="keyword">end</span></span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">def</span> <span class="title">draw</span></span></span><br><span class="line">    raise <span class="string">'Empty Envelope'</span> <span class="keyword">if</span> @size &lt; <span class="number">1</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> @size == <span class="number">1</span></span><br><span class="line">      @size -= <span class="number">1</span></span><br><span class="line">      <span class="keyword">return</span> @money</span><br><span class="line">    <span class="keyword">end</span></span><br><span class="line"></span><br><span class="line">    max = @money / @size * <span class="number">2</span></span><br><span class="line">    aquired = SecureRandom.random_number(max - <span class="number">1</span>) + <span class="number">1</span></span><br><span class="line"></span><br><span class="line">    @size -= <span class="number">1</span></span><br><span class="line">    @money -= aquired</span><br><span class="line">    aquired</span><br><span class="line">  <span class="keyword">end</span></span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">def</span> <span class="title">empty?</span></span></span><br><span class="line">    @size == <span class="number">0</span></span><br><span class="line">  <span class="keyword">end</span></span><br><span class="line"><span class="keyword">end</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">User</span></span></span><br><span class="line">  <span class="keyword">attr_reader</span> <span class="symbol">:name</span>, <span class="symbol">:money</span></span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">def</span> <span class="title">initialize</span><span class="params">(name, money)</span></span></span><br><span class="line">    @name = name</span><br><span class="line">    @money = money</span><br><span class="line">  <span class="keyword">end</span></span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">def</span> <span class="title">generate</span><span class="params">(money, size)</span></span></span><br><span class="line">    raise <span class="string">"<span class="subst">#&#123;@name&#125;</span> Go Bankrupt"</span> <span class="keyword">if</span> money &gt; @money</span><br><span class="line">    @money -= money</span><br><span class="line">    RedEnvelope.new(money, size)</span><br><span class="line">  <span class="keyword">end</span></span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">def</span> <span class="title">fetch</span><span class="params">(envelope)</span></span></span><br><span class="line">    fetched = envelope.draw</span><br><span class="line">    @money += fetched</span><br><span class="line">    fetched</span><br><span class="line">  <span class="keyword">end</span></span><br><span class="line"><span class="keyword">end</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Game</span></span></span><br><span class="line">  <span class="keyword">attr_accessor</span> <span class="symbol">:users</span></span><br><span class="line">  <span class="function"><span class="keyword">def</span> <span class="title">initialize</span><span class="params">(bet, users)</span></span></span><br><span class="line">    @bet = bet</span><br><span class="line">    @users = users</span><br><span class="line">    @round = <span class="number">0</span></span><br><span class="line">  <span class="keyword">end</span></span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">def</span> <span class="title">play</span><span class="params">(user)</span></span></span><br><span class="line">    @round += <span class="number">1</span></span><br><span class="line">    order = @users.shuffle</span><br><span class="line">    largest_amount = <span class="number">0</span></span><br><span class="line">    largest_user = <span class="literal">nil</span></span><br><span class="line">    envelope = user.generate(@bet, @users.size)</span><br><span class="line">    order.each <span class="keyword">do</span> <span class="params">|user|</span></span><br><span class="line">      amount = user.fetch(envelope)</span><br><span class="line">      <span class="keyword">if</span> amount &gt; largest_amount</span><br><span class="line">        largest_amount = amount</span><br><span class="line">        largest_user = user</span><br><span class="line">      <span class="keyword">end</span></span><br><span class="line">    <span class="keyword">end</span></span><br><span class="line">    print <span class="string">"Round <span class="subst">#&#123;@round&#125;</span>: "</span></span><br><span class="line">    puts @users.map &#123; <span class="params">|u|</span> u.money / <span class="number">100.0</span> &#125;.standard_deviation</span><br><span class="line">    largest_user</span><br><span class="line">  <span class="keyword">end</span></span><br><span class="line"><span class="keyword">end</span></span><br></pre></td></tr></table></figure><h2 id="标准差与破产探索"><a href="#标准差与破产探索" class="headerlink" title="标准差与破产探索"></a>标准差与破产探索</h2><p>我们先假设有 10 个玩家，每个人有 5000 元开局，每一把玩 200 元好了。</p><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">users = []</span><br><span class="line"><span class="number">10</span>.times <span class="keyword">do</span> <span class="params">|i|</span></span><br><span class="line">  users &lt;&lt; User.new(<span class="string">"User <span class="subst">#&#123;i&#125;</span>"</span>, <span class="number">5_000_00</span>)</span><br><span class="line"><span class="keyword">end</span></span><br><span class="line"></span><br><span class="line">game = Game.new(<span class="number">200_00</span>, users)</span><br><span class="line"></span><br><span class="line">user = users.first</span><br><span class="line">loop <span class="keyword">do</span></span><br><span class="line">  user = game.play(user)</span><br><span class="line"><span class="keyword">end</span></span><br></pre></td></tr></table></figure><p>进行了一次模拟，在游戏进行到第 2399 轮时，2 号玩家破产。玩家间余额的标准差随游戏轮数的关系如下：</p><p><img src="/static/std-env.jpg" alt="std-env"></p><p>多进行几次模拟，修改初始金额或每次的赌资，情况几乎不变。也就是随着游戏轮数的进行，玩家间余额的标准差（贫富差距）在变得越来越大，直到某一玩家破产，游戏结束。</p><p>这一结论是显然的，因为实际上这个游戏是一个典型的「无偏随机游走」问题，标准差与时间成正比。随着游戏进行，必然一些人变得极度有钱，而越来越多人会破产。</p><h2 id="随机算法的不随机之处"><a href="#随机算法的不随机之处" class="headerlink" title="随机算法的不随机之处"></a>随机算法的不随机之处</h2><p>但财富不单单是聚集的问题，如果我们仔细回头看这个随机算法，就会发现它是有规律的。</p><p>虽然均值一样，但是越早抽到红包，方差越小，越不可能遇到需要发红包的情况。越后抽越容易出现手气最佳，从而产生负收益的情况。在均值一致的情况下，只要减少发红包的次数就行了。于是，庄家如果有机器辅助的话，就可以把自己的期望变为正数。</p><p>但是，这时我就产生了一个疑问：「如果同时也有其它机器人一起参与抢单呢？」</p><p>我于是问了问司机，这群有人用抢红包工具吗？司机非常自信地告诉我：「不可能。群主会先收取押金，如果你被发现作弊，会直接把你踢出群。」</p><p>原来如此，原来只要把连着几把第一个抽的直接踢出群没收押金即可。</p><p>完美。</p><h2 id="结论"><a href="#结论" class="headerlink" title="结论"></a>结论</h2><p>十赌九输，</p><p>赌博前请先学数学。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;序&quot;&gt;&lt;a href=&quot;#序&quot; class=&quot;headerlink&quot; title=&quot;序&quot;&gt;&lt;/a&gt;序&lt;/h2&gt;&lt;p&gt;今天坐车的时候，看到司机的微信在玩一个叫「红包接龙」的游戏，让我提起了兴趣。游戏的规则很简单：群里有 100 个人，首先群主发一个 100 元的红包
      
    
    </summary>
    
    
      <category term="Ruby" scheme="https://coderemixer.com/tags/Ruby/"/>
    
      <category term="微信" scheme="https://coderemixer.com/tags/%E5%BE%AE%E4%BF%A1/"/>
    
      <category term="数学" scheme="https://coderemixer.com/tags/%E6%95%B0%E5%AD%A6/"/>
    
      <category term="赌博" scheme="https://coderemixer.com/tags/%E8%B5%8C%E5%8D%9A/"/>
    
  </entry>
  
  <entry>
    <title>挖一个关于 IM 工具的新坑</title>
    <link href="https://coderemixer.com/2019/03/05/project-nyan-chat/"/>
    <id>https://coderemixer.com/2019/03/05/project-nyan-chat/</id>
    <published>2019-03-04T19:15:08.000Z</published>
    <updated>2019-03-10T08:55:06.081Z</updated>
    
    <content type="html"><![CDATA[<h2 id="引言"><a href="#引言" class="headerlink" title="引言"></a>引言</h2><p>我考虑重新设计一个即时通讯工具的想法已经很久了，但一直没有付诸于事实。有几个理由让我不得不设计一个新的 IM。我对于我目前正在使用的 IM 工具都不能感到满意。我基本可以把我正在使用的 IM 分成几类：</p><ul><li>由运营商直接提供的通讯系统（电话、短信）</li><li>社交属性重的通讯工具（微信、Line、Facebook Messenger）</li><li>具有一定安全性设计的通讯系统（iMessage、Telegram、Keybase、Signal）</li></ul><h2 id="产品调研"><a href="#产品调研" class="headerlink" title="产品调研"></a>产品调研</h2><p>第一类工具是同时缺乏产品性和安全性的，它们的功能基础而单一，随便一点更新都很难推进，连 VoLTE 都是一个普及了好几年都很少有人在用的情况。而像是可以进行多人群聊的语音会议或是群发短信操作都非常复杂，资费同时也非常高。更严重的问题是，这些产品对于安全性是几乎没有保护的，你的聊天内容对于运营商不但是明文的，随便给你来个 GSM 伪基站配合降级攻击很容易就能让不法分子有可乘之机。</p><p>第二类工具的产品性非常强，功能迭代速度很快，你想要的东西它都有。但同时你泄漏的用户资料更多，你甚至无法判断这到底是一个社交应用还是一个聊天应用。人在公开场合聊天和私下聊天的目的明显是不同的。另外，一旦这些厂商可以通过利用你的个人隐私来盈利时，它们很难不这么做，这是资本的力量。据小道消息称，微信的开发团队来自于原邮箱团队，设计上很大参考了邮箱的设计，一直到前几年通过引入了 MMTLS 协议来提供了安全性上的保障。但由于微信不是一个开源工具，其安全性无法通过白盒测试的方法进行验证，如果存在后门，用户是无法预防的。而一旦通过黑盒方法找到漏洞的靠着这个赚钱都来不及，就更不要说能及时得到修复了。</p><p>第三类有安全性设计的系统例如带有 E2E 加密设计的 iMessage Telegram Keybase 和 Signal。iMessage 的安全情况我个人是高度怀疑的，尤其在 AppleID 安全事故频发的情况下。Telegram 虽然支持 E2E 模式，但并不是默认开启的，对多客户端的支持也有问题。桌面端的一些实现甚至不支持 E2E 模式，同时也不支持群聊加密。Telegram 和 Signal 基于手机号码的形式有很大的被嗅探的风险，这也是我不选择的一个原因。至于 Keybase 基于的 GPG 系统按理说是安全的，但 Keybase 是一个半开源的状态，我非常不放心这样的设计。更大的问题是，Keybase 在尝试把这个隐私优先的 IM 工具做成一个非常社交化的系统，每个人都能很自由地查询到用户的各个设备具体公钥的元信息，在隐私上造成了很大的困扰。</p><h2 id="产品设计"><a href="#产品设计" class="headerlink" title="产品设计"></a>产品设计</h2><blockquote><p>任何人的私生活、家庭、住宅和通信不得任意干涉，他的荣誉和名誉不得加以攻击。人人有权享受法律保护，以免受这种干涉或攻击。——《世界人权宣言》第十二条</p></blockquote><p>如果一个系统是通讯系统，那么隐私是这个系统的第一要务。一个没有良好隐私设计的通讯系统如同乔治奥威尔的小说<a href="https://zh.wikipedia.org/zh/%E4%B8%80%E4%B9%9D%E5%85%AB%E5%9B%9B" target="_blank" rel="noopener">《1984》</a>中无处不在的 <a href="https://zh.wikipedia.org/wiki/%E7%94%B5%E5%B9%95" target="_blank" rel="noopener">电幕（Telescreen）</a> 一样。更可怕的是，电幕本身的设计也许也很不良，以至于能观看到你隐私的不止有老大哥，还有可能是黑色产业链下的其他人。如果一个系统有后门，你不能保证知道这个后门的只有你自己。</p><p>这个系统同样必须要是毫无保留开源的，只有把安全问题曝光在太阳之下，才能及时解决这些问题。我希望这是一个自由软件（客户端基于 GPL，服务端基于 AGPL），这有助于每个人更好改进它，或者改造成适合在公司内使用的内部聊天工具。</p><p>基于这点之下，我重新设计了账户系统、聊天系统和群组系统。并期待能在隐私的大前提下去建立一个合适的聊天工具应有的样子。</p><h3 id="账户体系"><a href="#账户体系" class="headerlink" title="账户体系"></a>账户体系</h3><p>账户体系是围绕 GnuPG 设计的，服务器只存储你的公钥信息。如果你丢失了你的私钥或者保护私钥的密码，那么你的账户是完全不可找回的。当你的 key 发生泄漏的情况下，你可以通过吊销证书彻底摧毁掉这个帐号，不提供任何恢复的选项。这个过程直接粗暴，不会有所谓客服介入，以减少社会工程学攻击的可能。吊销前你可以通过没有丢失的设备导出好友列表，但之后依然需要在新帐号重新添加。</p><p>当用户在新设备上登录时，用户会生成一组设备密钥对，并用账户私钥加密存储。之后每次登录则是需要验证账户私钥然后将设备密钥对加载至内存中，关机即销毁。当你登录后，你会和服务器建立连接。当你的好友试图与你通讯时，需要获取你全部登录设备的公钥，将一条信息用自己的私钥签名并用你的全部公钥加密后发送到服务器上，服务器转发给你。这个过程中，服务器除了知道发送者和接收者分别是谁，除此之外的全部信息都无法知晓，以实现点对点加密。</p><p>你除了用户名和头像以外的全部个人信息，包括你的公钥列表都必须在好友添加验证通过后才会被其他人看到，以尽可能减少元信息的泄漏。用户可以在应用中通过便捷的方式导出全部公钥的二维码图像，以便于通过其它信道与发送者检查是否存在 MITM 攻击。</p><h3 id="群组设计"><a href="#群组设计" class="headerlink" title="群组设计"></a>群组设计</h3><p>不同于 Telegram，这个系统的群组聊天同样提供有效的点对点加密，只是实现的机理不太一样。进入群组后，每个人会产生一个群组密钥对，利用其它群员的设备公钥将自己的公钥加密并传输给其它人。每次发送消息时用自己的群组私钥加密并发送出去，其它人用之前收到的公钥进行解密。</p><p>这个过程对于服务器来说同样也是无法知晓的，服务器只负责转发信息。需要注意的一点是，一旦有群组成员被踢出群组，那么这个密钥交换过程必须重置，以避免有问题的服务器将信息继续发送给已经被踢出群的群员后，其依然可以解密的风险。</p><h3 id="守护服务（Daemon-Service）"><a href="#守护服务（Daemon-Service）" class="headerlink" title="守护服务（Daemon Service）"></a>守护服务（Daemon Service）</h3><p>这个设计的一个弊端是你无法同一个没有在线的用户聊天。这是显然的，服务器没有保存你的私钥，发送者也不知道你会用哪个设备查看这条消息。真的是「辛辛苦苦 30 年，一朝回到解放前」，给你一种在使用 NetMeeting 的感觉。</p><p>不过我能想到的一个解决方案是提供一个无头的客户端，允许用户挂在到服务器上 24h 运行以代收消息，其它客户端可以与这个无头客户端同步消息以达到不丢数据的目的。帮助非极客用户提供部署守护服务可以作为官方的一个增值服务以弥补服务器的开支。</p><h2 id="技术栈与开源协议选型"><a href="#技术栈与开源协议选型" class="headerlink" title="技术栈与开源协议选型"></a>技术栈与开源协议选型</h2><p>暂时把这个项目定名字叫 Nyan Chat（猫聊（暂定））</p><p><a href="https://github.com/nyan-chat" target="_blank" rel="noopener">GitHub Organization</a></p><ul><li><a href="https://github.com/nyan-chat/nyan-core" target="_blank" rel="noopener">nyan-core</a> GPLv3 协议。加密的核心实现，Rust 开发，以库的形式加载给其它组件。</li><li><a href="https://github.com/nyan-chat/nyan-api" target="_blank" rel="noopener">nyan-api</a> AGPLv3 协议。API 实现，Ruby 开发，基于 Sinatra、Sequel 和 Ohm，提供一下元信息的交互，以 Redis 作数据交换为主，Postgres 为辅，可水平扩展。</li><li><a href="https://github.com/nyan-chat/nyan-node" target="_blank" rel="noopener">nyan-node</a> AGPL v3 协议。服务端通讯节点实现，Elixir 开发。提供与用户终端的 Socket 连接，与 Redis 通讯快速验证一些元信息。节点间自由通讯，可水平扩展。</li><li><a href="https://github.com/nyan-chat/nyan-desktop" target="_blank" rel="noopener">nyan-desktop</a> GPLv3 协议。目前优先开发的桌面客户端实现，使用 TypeScript 和 Electron。</li><li><a href="https://github.com/nyan-chat/nyan-daemon" target="_blank" rel="noopener">nyan-daemon</a> AGPLv3 协议。Go 语言开发的守护服务。</li></ul><p>开发时间表另定。欢迎有兴趣的人留言讨论具体细节。</p><p>最后分享一个我最近发现的 2016 年在卡杜甘音乐厅演出的《文明 4》主题曲 Baba Yetu 的 Live，非常震撼。</p><iframe width="560" height="315" src="https://www.youtube-nocookie.com/embed/noneMROp_E8" frameborder="0" allow="accelerometer; autoplay; encrypted-media; gyroscope; picture-in-picture" allowfullscreen></iframe>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;引言&quot;&gt;&lt;a href=&quot;#引言&quot; class=&quot;headerlink&quot; title=&quot;引言&quot;&gt;&lt;/a&gt;引言&lt;/h2&gt;&lt;p&gt;我考虑重新设计一个即时通讯工具的想法已经很久了，但一直没有付诸于事实。有几个理由让我不得不设计一个新的 IM。我对于我目前正在使用的 IM 
      
    
    </summary>
    
    
      <category term="编程" scheme="https://coderemixer.com/tags/%E7%BC%96%E7%A8%8B/"/>
    
      <category term="开源" scheme="https://coderemixer.com/tags/%E5%BC%80%E6%BA%90/"/>
    
      <category term="猫聊" scheme="https://coderemixer.com/tags/%E7%8C%AB%E8%81%8A/"/>
    
  </entry>
  
  <entry>
    <title>推广方言正字的意义</title>
    <link href="https://coderemixer.com/2019/02/07/chinese-dialect-orthography/"/>
    <id>https://coderemixer.com/2019/02/07/chinese-dialect-orthography/</id>
    <published>2019-02-06T16:26:09.000Z</published>
    <updated>2019-02-06T17:34:09.001Z</updated>
    
    <content type="html"><![CDATA[<h2 id="序"><a href="#序" class="headerlink" title="序"></a>序</h2><p>正字，也就是「正体字」，从正俗的角度来看，与「异体字」相对。虽然台湾的繁体中文常被标榜成「正体中文」，但实际上日常的使用中充斥了各种俗字。比如「群」字「《五經文字》羣，俗作群。」，其实是「羣」的异体字。对于繁体中文的正字化有很多人推动。但我今天有觉得，面对我们使用的方言，比如吴语、粤语、闽南话等正字化的推动是一个更重要的问题。为什么我认为推广方言正字比起官话更重要，我想从我熟悉的一个吴语俗字说起。</p><h2 id="从一个吴语俗字说起"><a href="#从一个吴语俗字说起" class="headerlink" title="从一个吴语俗字说起"></a>从一个吴语俗字说起</h2><p>吴语中有一个词叫「劜闹猛」：</p><table><thead><tr><th>词语</th><th>钱乃荣式上海话拼音方案</th><th>IPA</th></tr></thead><tbody><tr><td>劜闹猛</td><td>ghak nok mang</td><td>/gɐʔ noʔ mᴀ̃/</td></tr></tbody></table><p>是「凑热闹」的意思。</p><p>无论是电视媒体，还是平时使用，都常常被写成「轧闹忙」。这个字和「劜」的读音是一致的，但从意思上来说不太对。根据《康熙字典》：「《廣韻》於黠切《韻會》《正韻》乙黠切，𠀤音扎。《說文》車輾也。《六書故》車載重，蹍軋有聲也。」这里的热闹，怎么想，都和车辗过好像没有什么关系吧。</p><p>一般来说，认为这个正字是「劜」，「《玉篇》勜劜，屈强也。」这个解释就很符合凑热闹的特性。《吴下方言考》卷十一：「吴中以人众不得出而用力挤排为『劜』。」则更是确认了这一观点。然而也并不是没有这么用的，比如用苏白写成的《海上花列传》第 021 回：「俄延多時，翠鳳忽說道：『耐自家算算看，幾花年紀哉。再要去軋姘頭，阿要面孔！』」中的「軋姘頭」就使用了「軋」字。</p><h2 id="使用俗字带来的问题"><a href="#使用俗字带来的问题" class="headerlink" title="使用俗字带来的问题"></a>使用俗字带来的问题</h2><p><img src="/static/hokhang.png" alt="hokhang"></p><p>我们知道杰哥的房里有一些「好康」的。这个「好康」到底指的是什么？如果很多没有接触过闽南语的人甚至会误以为是「好看」的意思。然而这里的「好康」指的是「有好处的」，比如一些特卖资讯也常被叫作「好康资讯」。之所以会有这样的误解，很大程度上就是这里的「康」是个除了读音以外完全无关的俗字。其正确写法是「好空」。</p><table><thead><tr><th>词语</th><th>方音符号</th><th>台罗拼音</th></tr></thead><tbody><tr><td>好空</td><td>ㄏㄜˋㄎㄤ</td><td>hó‑khang</td></tr><tr><td>歹空</td><td>歹ㄆㆮˋㄎㄤ</td><td>pháinn‑khang</td></tr></tbody></table><p>空，细缝。好空，就是基于词的衍生义，有好处的。相应地，歹空就是有坏处的。</p><p>汉字是同时具有意义和读音的，俗字往往只是借用了读音，而失去了汉字本身的意义。这在很多时候也许问题没有那么大，但对于现在各个岌岌可危的方言保护来说，则变得非常严重。</p><p>如果我们的方言只剩下音，而没有了文字本身的意义，那么本质上就是汉语的拉丁化，如果我们还承认那是方块字的话，那其实也只是汉语的「谚文化」而已。在使用谚文的韩语中，「고사」可以指代「故事」、「古寺」、「告祀」、「枯死」等等，在缺乏上下文的情况下，无法理解单词的意思。换句话说，几乎所有反对汉语拉丁化的理由都可以应用于此来反对方言不使用正字上。</p><h2 id="使用正字带来的好处"><a href="#使用正字带来的好处" class="headerlink" title="使用正字带来的好处"></a>使用正字带来的好处</h2><p>事实上，一旦使用正字，我们对方言的理解会变得简单很多。下面是一些闽南话的例子：</p><table><thead><tr><th>词语</th><th>俗字</th><th>方音符号</th><th>台罗拼音</th></tr></thead><tbody><tr><td>練痟話</td><td>練肖話</td><td>ㄌㄧㄢ˫ㄒㄧㄠˋㄨㆤ˫</td><td>liān‑siáu‑uē</td></tr><tr><td>哭爸</td><td>靠北</td><td>ㄎㄠ˪ㄅㆤ˫</td><td>khàu‑pē</td></tr></tbody></table><p>像是「練肖話」听到后，你可能很难反应过来练的到底是什么话，如果望文生义，可能还以为是什么好话。但「痟」是病字头的，指「疯病」。例如「痟人」就是「疯人」，那么「練痟話」毋庸质疑是「练疯话」的意思。</p><p>再比如「靠北」，正字写法是「哭爸」。什么场合下会哭？这里指代的自然是「丧父」的场合。所以非常显而易见，这就是一个以丧父为比喻的骂人语。</p><p>同样的理论，在其它方言中也很适用。比如粤语中，你知毋知道乜係「唔知」呀？（你知道「唔知」是什么吗？）但如果写成本字，「唔」其实是「毋」。</p><table><thead><tr><th>本字</th><th>借字</th><th>粤拼</th><th>IPA</th></tr></thead><tbody><tr><td>毋</td><td>唔</td><td>m⁴</td><td>m̩˩</td></tr></tbody></table><p>自然也就是「不知道」的意思了。</p><p>现在各个地方的方言往往是四十岁以下乱读，四十岁以上乱写。方言正在一步步走进博物馆，而不是走进日常的生活。想比于官话，虽然我们也在使用大量的俗字，但大体上，汉字还是能表达含义的。而方言中单纯标音的俗字已经被极大滥用，甚至脱离读音整句句子都变得没有意义。使用正字可以有效让语言变得更合理，对于使用语言也可以变得更规范，让这些方言从「音」回归到「形」上。</p><h2 id="推广方言正字的难点"><a href="#推广方言正字的难点" class="headerlink" title="推广方言正字的难点"></a>推广方言正字的难点</h2><p>那么听起来推广方言正字那么好，为什么我们很难做这件事呢？这就取决于其正字这件事本身的难度了。事实上，由于年代久远，我们对于什么字是本字是一件很难推断的事。再加上很多方言留下的文字资料很少，甚至一度被认为某些语言是无法书写的。而即使有留下的文字资料，对于文字的不同解读、训诂都会对我们的推断造成很大的影响。有时甚至还会落入循环论证的怪圈里。</p><p>另外有些字年代久远，在现代汉语中用得很少，本字表达也未必清楚。有时也不得不跟从大家的习惯，香港电视台的许多粤语字幕也常常是本字俗字混夹的。</p><p>我的观点上来看，虽然要想完全正确使用方言正字是一件操作上不可能的事情。但是，对于对于正字的探索过程，哪怕是始终悬着一颗要写正字方言的心，确实对于使用、保护方言的工作还是有很大帮助的。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;序&quot;&gt;&lt;a href=&quot;#序&quot; class=&quot;headerlink&quot; title=&quot;序&quot;&gt;&lt;/a&gt;序&lt;/h2&gt;&lt;p&gt;正字，也就是「正体字」，从正俗的角度来看，与「异体字」相对。虽然台湾的繁体中文常被标榜成「正体中文」，但实际上日常的使用中充斥了各种俗字。比如「群」
      
    
    </summary>
    
    
      <category term="语言学" scheme="https://coderemixer.com/tags/%E8%AF%AD%E8%A8%80%E5%AD%A6/"/>
    
      <category term="方言" scheme="https://coderemixer.com/tags/%E6%96%B9%E8%A8%80/"/>
    
      <category term="汉语" scheme="https://coderemixer.com/tags/%E6%B1%89%E8%AF%AD/"/>
    
      <category term="吴语" scheme="https://coderemixer.com/tags/%E5%90%B4%E8%AF%AD/"/>
    
      <category term="闽南话" scheme="https://coderemixer.com/tags/%E9%97%BD%E5%8D%97%E8%AF%9D/"/>
    
      <category term="粤语" scheme="https://coderemixer.com/tags/%E7%B2%A4%E8%AF%AD/"/>
    
  </entry>
  
  <entry>
    <title>「为什么我把『は』都听成『わ』了？」</title>
    <link href="https://coderemixer.com/2019/01/19/why-i-hear-all-ha-into-wa/"/>
    <id>https://coderemixer.com/2019/01/19/why-i-hear-all-ha-into-wa/</id>
    <published>2019-01-18T15:07:02.000Z</published>
    <updated>2019-01-19T03:02:26.278Z</updated>
    
    <content type="html"><![CDATA[<p>萌娘百科的<a href="https://zh.moegirl.org/君日本语本当上手" target="_blank" rel="noopener">「君日本语本当上手」</a>里有这么一段描述：</p><blockquote><p>现在该语句常见于目标对象的日语水平不足而引发的低级错误产生笑料时讽刺目标语言能力不足的情况。</p><p>…</p><ul><li>个人日语知识缺乏的情况下发表高谈阔论<ul><li>…</li><li>为什么我把は都听成わ了？</li></ul></li></ul></blockquote><p>「は」做助词时念作「わ」似乎是每个日语学习者遇到的第一个「特例」。似乎每个老师都这么教，读错了别人会笑你，但如果反问其原因，多半只能得到一个形如「约定俗成」这样循环论证的话。</p><p>另外假名的「ハ段」本身听起来就怪怪的，ハヒヘホ发的都是清喉擦音 /h/ 的音，唯独フ却是接近 /ɸ/ 的清双唇擦音。</p><p>然而这个「は」字的来头其实并不小，小小一个字实际上是日语从「上古日语」「中古日语」再到「中世日语」的语音大变革的见证者。</p><h2 id="万叶假名与反切"><a href="#万叶假名与反切" class="headerlink" title="万叶假名与反切"></a>万叶假名与反切</h2><p>有一句话叫「研究语法多看古代日语，学习词汇多看现代日语」，这一句话在这里非常适用，要想了解「は」特殊语法含义时的特殊语音现象，我们却是需要多看一些古代日语。我们翻一下《万葉集 巻第十》二一四五（759 年）</p><p><img src="/static/genryaku-manyoushuu.jpg" alt="genryaku-manyoushuu"><br><strong>Shot By ReijiYamashina. CC 3.0 BY-SA</strong></p><blockquote><p>[原文]秋芽子之 戀裳不盡者 左&lt;壮&gt;鹿之 聲伊續伊継 戀許増益焉 </p><p>[訓読]秋萩の恋も尽きねばさを鹿の声い継ぎい継ぎ恋こそまされ </p><p>[仮名]あきはぎの こひもつきねば さをしかの こゑいつぎいつぎ こひこそまされ </p></blockquote><p>这里的「恋」并没有读成我们熟悉的「こい」而是读成了「こひ」。如果我们查「ひ」的万叶假名（万葉仮名），我们会得到</p><table><thead><tr><th>甲类</th><th>乙类</th></tr></thead><tbody><tr><td>比必卑賓日氷飯負嬪臂避匱</td><td>非悲斐火肥飛樋干乾彼被秘</td></tr></tbody></table><p>我们知道万叶假名是利用汉字的音读和训读来标记日文读音的，那么大致来说，引入时这些汉字的读音应该是和需要读的日文发音是接近的。虽然万叶假名的时间比隋唐更早，但更早我们很难找到相关中文语音资料，我们在这里查这些字在《廣韻》《正韻》等书中的反切读法。</p><table><thead><tr><th>类别</th><th>汉字</th><th>《廣韻》反切</th><th>拟音（王力）</th></tr></thead><tbody><tr><td>甲类</td><td>比</td><td>卑履</td><td>pi</td></tr><tr><td></td><td>必</td><td>卑吉</td><td>pĭĕt</td></tr><tr><td>乙类</td><td>非</td><td>甫微</td><td>pĭwəi</td></tr><tr><td></td><td>悲</td><td>府眉</td><td>pi</td></tr></tbody></table><p>我们发现无论是哪一类，声母在几种常见的拟音中几乎都是发 /p/。上古日语的拟音，是通过同时期古汉语和古琉球语的语音作比较的，所以目前一般也认为上古日语中，「ハ行」发的是 /p/ 这个辅音。</p><h2 id="从塞音到擦音"><a href="#从塞音到擦音" class="headerlink" title="从塞音到擦音"></a>从塞音到擦音</h2><p>然而「ハ行」的发音在公元 9 世纪后的中古日语中发生了巨变。一般认为，在这个过程中，发音的部位没有太大变化，依然是双唇音。但是发音的方式发生了变化，从塞音（爆破音）变成了擦音 /ɸ/。这个音比起 /p/，听起来明显更像唇齿擦音的清音 /f/。也就是说，这个时代的「フ」已经几乎发成现在这个样子了。</p><p>我们之前举的例子「恋」，在这个时期的发音，就已经从 /kopi/ 发成了 /koɸi/。然而这并没有结束。至少在十一世纪时期以前，在词首以外的位置的「ハ行」发音进一步变成了「ワ行」（ハ行転呼）。也就是从擦音变成了双唇近音 /β̞/， /koɸi/ 也就进一步变成了「こゐ」  /koβ̞i/。</p><p>在现代日语中，「ワ行」从双唇近音进一步变成了圆唇化软颚近音 /w/ [ɰʷ]，但这一点变化没有那么大。更大的是，现代日语中，将「ゐ」「ゑ」这两个假名简化掉了，于是「恋（こひ、こゐ）」简化成了今天的样子「こい」。</p><h2 id="は、へ-与现代假名遣（現代仮名遣い）"><a href="#は、へ-与现代假名遣（現代仮名遣い）" class="headerlink" title="は、へ 与现代假名遣（現代仮名遣い）"></a>は、へ 与现代假名遣（現代仮名遣い）</h2><p><img src="/static/gendaikanazukai.jpg" alt="gendaikanazukai"></p><p>从刚刚的发展过程中我们知道，所有原先的「ハ行」都在历史的发展中转化成了「ワ行」或者「ア行」。现在所有「ハ行」的词几乎（合成语除外），均为自镰仓时代以来形成的词。并且读音也变得更接近于 /h/ 的读音。以前发「ハ行」的词都已经不复存在。</p><p>为了规范读音，日本政府于 1946 年和 1986 年提出和修订了称之为<a href="http://www.mext.go.jp/b_menu/hakusho/nc/k19860701001/k19860701001.html" target="_blank" rel="noopener">「現代仮名遣い」</a>的内阁告示。其中的一个原则就是「按照现代的音韵来书写假名」。于是像是「川」「恋」也分别从「かは」「こひ」正式变成了我们熟悉的「かわ」「こい」的形式。</p><p><strong>但是，有一些例外！</strong></p><p>助词「は」「へ」「を」虽然读音已经发生了改变，但写法保持不变。</p><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>这也就是今天我们学习日语「ハ行」的「フ」发成了 /ɸ/，因为它保留了「ハ行」之前的读音。而「は」「へ」读成「わ」「え」则是ハ行转呼（ハ行転呼）的影响。</p><p>「为什么我把『は』都听成『わ』了？」</p><p>这看起来非常愚蠢的问题，不但揭示了语言的例外产生的各种巧合，也展示了日语语音在几百年来的发展历程。这问题深奥得很。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;萌娘百科的&lt;a href=&quot;https://zh.moegirl.org/君日本语本当上手&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;「君日本语本当上手」&lt;/a&gt;里有这么一段描述：&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;现在该语句常见于目标对象的日语
      
    
    </summary>
    
    
      <category term="语言学" scheme="https://coderemixer.com/tags/%E8%AF%AD%E8%A8%80%E5%AD%A6/"/>
    
      <category term="日语" scheme="https://coderemixer.com/tags/%E6%97%A5%E8%AF%AD/"/>
    
  </entry>
  
  <entry>
    <title>平成最后的烂尾游戏——东京地下铁 2018 解谜游戏设计分析</title>
    <link href="https://coderemixer.com/2019/01/10/heisei-last-unfinished-game/"/>
    <id>https://coderemixer.com/2019/01/10/heisei-last-unfinished-game/</id>
    <published>2019-01-10T11:58:25.000Z</published>
    <updated>2019-01-10T12:09:09.717Z</updated>
    
    <content type="html"><![CDATA[<h2 id="序"><a href="#序" class="headerlink" title="序"></a>序</h2><p>这个几年来久闻东京地下铁解谜游戏的大名，一支没有完整地体验一下这个游戏。终于在去年年底的时候尝试了一下这款游戏。体验下来的感觉褒贬不一，所以我打算从游戏设计的角度，系统地来聊一聊这款游戏。</p><p><img src="/static/tokyo-metro-2018.jpg" alt="tokyo-metro-2018"></p><h2 id="游戏简介"><a href="#游戏简介" class="headerlink" title="游戏简介"></a>游戏简介</h2><p>游戏的基本流程就是在你购买完游戏套件（Kit）后，从你所在的车站开始，利用套件里提供的道具与车站及附近的现实场景进行交互，从而获得线索一步一步解开谜题。</p><p>游戏的设计公司是「SCRAP」，这家公司设计了大量类似的现实解谜游戏<a href="http://realdgame.jp/" target="_blank" rel="noopener">「リアル脱出ゲーム」</a>。游戏的监督是毕业于京都大学的<a href="https://www.facebook.com/hikaru.sakaidani" target="_blank" rel="noopener">「堺谷 光」</a>，在查阅资料的过程中找到了他的一篇游戏设计<a href="https://arxiv.org/pdf/1306.4884.pdf" target="_blank" rel="noopener">论文</a>，这篇论文对简单的 Tic Tac Toe 游戏进行发展，实现了一个策略复杂的棋类游戏，并对游戏数值进行了建模和演算。在游戏过程中，我感到了一种非常类似的<a href="https://zh.wikipedia.org/zh/%E6%A8%A1%E8%BF%9B" target="_blank" rel="noopener">「模进（Sequentia）」</a>发展的感觉，游戏设计了一些最基本的谜题思路（动机），通过在重复、变换和组合实现一个非常激动人心的游戏体验。</p><h2 id="分支与引导设计"><a href="#分支与引导设计" class="headerlink" title="分支与引导设计"></a>分支与引导设计</h2><p>游戏的一个 Puzzle 是一个基于鬼脚图（阿弥陀籤）变化的游戏。和鬼脚图不同的地方是，每个连接处都有一个图形。而游戏提示有一个图形不能被通过，而这时就引入了游戏中的第一个引导设计。在游戏的描述中希望你在 MINITIA 糖上找到一个黑色的图形，而这个图形就是那个不能被通过的图形。游戏的第二个谜题则是和网站上的<a href="http://realdgame.jp/chikanazo/5/renshu/index.html" target="_blank" rel="noopener">「練習問題」</a>类似的设计，通过メトロ的站名与编号之间的转换来解开谜题。</p><p>这里给出了游戏第一个设计上的巧思。第一、因为这个 MINITIA 糖就出现在了游戏提供的套件中，隐含了游戏的第一个要点「你需要巧妙使用套件里的东西」。第二、游戏套件封面上有站点的地图，并标出了游戏所有可能发生的车站站名，查询车站编号时无疑这里查起来更快。然而，对于鬼脚图谜题实际上一共只有 4 个图形，试一下就做出来了；而车站名谜题 Google 一下也有了。于是这两处引导显得非常不必需，而一旦错过，却在之后会非常痛苦。</p><p>经过了第一、第二个谜题，游戏进入了分支路线。玩家可以从三对地点中选择自己的分支。由于我从新宿站出发，我选择的是四谷和千駄木。这一点很好照顾了不同出发地点的玩家。与其说是分支，不如说是聚合，把不同地方开始的玩家，通过不同的引导方式，最终指引到唯一的地方去。这种设计非常值得 Ingress Mission Day 设计，Ingress 目前的线下活动，要么是线性的，要么就是无顺序的，使得游戏体验很难在乐趣和多元间达到平衡，而这处分支引导，则是一个非常柔性却非常有效的多路线设计。</p><h2 id="i18n-设计"><a href="#i18n-设计" class="headerlink" title="i18n 设计"></a>i18n 设计</h2><p>需要提到的是，这个游戏设计了双语的版本，提供了日本语和英语两个游戏选项。我手上的谜题是英文版的。游戏的设计者试图在抹平这两者的差异，但实际上两者的游戏难度却有很大的不同。这一点从我面临的第三、第四个难题（Mission 1）中有很大的体现。游戏设计者在此处大量设计了字谜，而日语字谜和英语字谜的原理有很大的不同。</p><p>日语的每个字母（仮名）都是一个音节，而英语的每个音节长短不一，且字母到音位并不是一个严格的映射关系。（P.S 谁真的严格按照 <a href="https://ai.googleblog.com/2017/12/tacotron-2-generating-human-like-speech.html" target="_blank" rel="noopener">Google Tacotron 2 论文</a>里描述的方法去训练 TTS AI 的，都尝过苦头吧）这使得凡是涉及字谜的部分，英文都变得简单很多。因为你非常容易通过排列组合上的尝试排除掉大量的选项。</p><p>这个问题最严重的地方就在于 Mission 2，直接把一个现实游戏变成了一款「云游戏」。虽然我知道我要去「京橋駅」解这个谜题，然而只需简单排列组合一下，我就直接解开了这个谜题。这一点在最终谜题（Final Mission）时也会得到体现。这一点我会在之后进一步提及。</p><h2 id="渐强设计"><a href="#渐强设计" class="headerlink" title="渐强设计"></a>渐强设计</h2><p>随着解开 Mission 2，游戏会通过一个过渡任务将你引向一个非常综合性的挑战。这个过渡任务是个纸笔游戏，并且介绍了游戏中纸张与笔的妙用（这一点在之后会被进一步用到）。在完成过渡游戏后，游戏会把你带到「渋谷」。</p><p>然后，在涩谷地下大迷宫里大暴走的可怕时间就到来了。然而一上来就给我玩了一处高级的，由于渋谷マークシティ正在进行促销活动，巨幅海报遮挡住了游戏正常流程中的必备道具，只在旁边放上一个很小的告示牌。涩谷的这个谜题非常综合，几乎要用到套件里的所有道具。这似乎是一个劝退点，如果不能解出这个谜题，几乎无法进行更后面的挑战，可以直接选择放弃。（于是在某个挑战进行的自動販売機前挤满了各种试图寻找答案的人（完全是迷惑行为吧））</p><p>这个谜题的体验非常好，几乎是这个游戏中让人觉得最巧妙的地方。</p><h2 id="Final-Mission-难度分支"><a href="#Final-Mission-难度分支" class="headerlink" title="Final Mission 难度分支"></a>Final Mission 难度分支</h2><p><img src="/static/tokyo-metro-final-project.jpg" alt="tokyo-metro-final-project"></p><p>在完成上述挑战后，游戏会给你一个过渡字谜游戏。这个字谜游戏我认为是这个游戏非常好的设计，却是非常糟糕的实践。这个谜题根据你前往终极问题的路上每站一个小字谜的解题表现，来决定你终极问题的难度。作为一个解谜游戏，又要做成一款阖家欢乐的游戏是非常难的，很难同时讨好解谜硬核玩家和休闲玩家。从想法上来说非常好。实践上糟糕的地方在于，题目描述得有问题，很多人甚至都没有看懂题目。而这个题目的糟糕之处更在于，在没看懂题目的情况下你竟然还可以正常做完。</p><p>但无论如何，这个谜题很好维持了完成综合性谜题后通往终极问题的紧张感。让你知道前方会有一个非常激动人心的挑战。</p><p>Final Mission 谜题的第一步被设计成一个迷你数独，虽然我没有严格证明一下，但大致可以确定是一个 NP Complete 问题。而根据 S、A、B 难度不同，谜题的已知部分不一样。我完成的是 S Rank 的 Final Mission 挑战，按理说应该很难，而且通过人来解一个很难的 NPC 问题，应该会耗费很大的精力。但这时候就要提到游戏刚刚那个 i18n 的败笔。我单纯排列组合一下，就直接找到了 Final Mission 的答案。</p><p>在提交答案后，游戏最后对你手上的手册提出最后的谜题，在一系列纸币的综合挑战后，游戏就正式完成，给你播放通关动画。而这又带来了游戏的第二个大败笔，所谓的难度分支根本就形同虚设，无论你选择什么难度，在通关过程中没有任何差别。这使得游戏渐强然后慢慢达到解谜的高潮的感觉完全违背，突然而来的结局，就好像小说写不下去突然把所有人都写死一样让人崩溃。</p><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p><img src="/static/tokyo-metro-2018-time.jpg" alt="tokyo-metro-2018-time"></p><p>从游戏开始的 10 点到最后通关的下午 5 点，整个游戏流程不满 7 个小时，期间看了三次的 Hint。游戏难度设计上我认为还是适中的，但也不是人人可以通关的难度。游戏的整体流程设计和铺垫可圈可点。但是由于游戏设计的重心失衡，和 i18n 设计上的严重失误，使得游戏体验并不算很完美。</p><p>通过这个游戏，我觉得我可以关注一下 SCRAP 其它的<a href="http://realdgame.jp/" target="_blank" rel="noopener">「リアル脱出ゲーム」</a>，至少这个游戏的形式设计得还是不错的。如果剧本能够更平衡一些，或者引入一些主线剧情想必会更好。另外就是，如果可以，我希望明年体验一下日文版的游戏，说不定会有更好的体验。</p><p>另外就是，我们神奈川乡下人进一次城真不容易。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;序&quot;&gt;&lt;a href=&quot;#序&quot; class=&quot;headerlink&quot; title=&quot;序&quot;&gt;&lt;/a&gt;序&lt;/h2&gt;&lt;p&gt;这个几年来久闻东京地下铁解谜游戏的大名，一支没有完整地体验一下这个游戏。终于在去年年底的时候尝试了一下这款游戏。体验下来的感觉褒贬不一，所以我打算从
      
    
    </summary>
    
    
      <category term="游戏" scheme="https://coderemixer.com/tags/%E6%B8%B8%E6%88%8F/"/>
    
      <category term="设计" scheme="https://coderemixer.com/tags/%E8%AE%BE%E8%AE%A1/"/>
    
      <category term="混合现实" scheme="https://coderemixer.com/tags/%E6%B7%B7%E5%90%88%E7%8E%B0%E5%AE%9E/"/>
    
  </entry>
  
</feed>
